scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = NULL)
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
shinyApp(ui, server)
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- "id1234"
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = NULL, stderr = NULL)
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
?write
getwd()
shinyApp(ui, server)
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- "id1234"
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = "", stderr = "")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
library(shinyTools)
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("RProcess"),
numericInput("num1", "Number1", 2, 1, 5),
actionButton("trigger", "Multiply number1"),
helpText("This is done in R batch script."), br(),
numericInput("num2", "Number2", 2, 1, 5),
helpText("Number2 is multiplied in app.")
),
mainPanel(h2("Result of number1"), verbatimTextOutput("res1"),
h2("Result of number2"), verbatimTextOutput("res2"))
))
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- "id1234"
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = "", stderr = "")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
shinyApp(ui, server)
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- NULL
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = "", stderr = "")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
a <- list(a = 1:2, b = 3:4)
a <- list(a = 1:2, b = 3:4, c = "")
a
lapply(a, function(x) if(x == "") NULL)
lapply(a, function(x) if(x[1] == "") NULL)
a
lapply(a, function(x) if(x[1] == ""))
lapply(a, function(x) x[1] == "")
lapply(a, function(x) if(x[1] == "") NULL else x)
a$a <- "asd"
lapply(a, function(x) if(x[1] == "") NULL else x)
library(shinyTools)
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("RProcess"),
numericInput("num1", "Number1", 2, 1, 5),
actionButton("trigger", "Multiply number1"),
helpText("This is done in R batch script."), br(),
numericInput("num2", "Number2", 2, 1, 5),
helpText("Number2 is multiplied in app.")
),
mainPanel(h2("Result of number1"), verbatimTextOutput("res1"),
h2("Result of number2"), verbatimTextOutput("res2"))
))
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- NULL
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = "", stderr = "")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
ReadInfo("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
ReadInfo <- function(statusFile){
info <- strsplit(readLines(statusFile), ";")
names(info) <- sapply(info, function(x) x[1])
info <- sapply(info, function(x) x[-1])
info$statusFile <- statusFile
#info <- lapply(info, function(x) if(x[1] == "") NULL else x)
class(info) <- "ProcessInfo"
info
}
ReadInfo("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
ReadInfo <- function(statusFile){
info <- strsplit(readLines(statusFile), ";")
names(info) <- sapply(info, function(x) x[1])
info <- sapply(info, function(x) x[-1])
info$statusFile <- statusFile
info <- lapply(info, function(x) if(length(x) < 1) NULL else x)
class(info) <- "ProcessInfo"
info
}
ReadInfo("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- NULL
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = "", stderr = "")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
library(shinyTools)
shinyApp(ui, server)
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- "asd1234"
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- NULL #"/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = "", stderr = "")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
shinyApp(ui, server)
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- "asd1234"
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = NULL, stderr = NULL)
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
library(shiny)
?ns
NS("id")
NS()
NS("asd")
NS("asd")("asd")
NS("id")("asd")
NS("id")()
NS("id")("")
session$ns("ifof")
?callModule
library(shinyTools)
source("R/RProcessStart.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("RProcess"),
numericInput("num1", "Number1", 2, 1, 5),
RProcessStartUI("process"),
actionButton("trigger", "Multiply number1"),
helpText("This is done in R batch script."), br(),
numericInput("num2", "Number2", 2, 1, 5),
helpText("Number2 is multiplied in app.")
),
mainPanel(h2("Result of number1"), verbatimTextOutput("res1"),
h2("Result of number2"), verbatimTextOutput("res2"))
))
server <-function(input, output, session) {
callModule("RProcessStart", "process", trigger = reactive(input$trigger), object = reactive(input$num1),
logFile = "/home/marc/src/mRc_repo/shinyTools/log/log.log",
scriptPath = "/home/marc/src/mRc_repo/shinyTools/scripts/process.R")
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
?ReactiveTextInput
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
logFile = "/home/marc/src/mRc_repo/shinyTools/log/log.log",
scriptPath = "/home/marc/src/mRc_repo/shinyTools/scripts/process.R")
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
source("R/RProcessStart.R")
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
logFile = "/home/marc/src/mRc_repo/shinyTools/log/log.log",
scriptPath = "/home/marc/src/mRc_repo/shinyTools/scripts/process.R")
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
logFile = "/home/marc/src/mRc_repo/shinyTools/log/log.log",
scriptPath = "/home/marc/src/mRc_repo/shinyTools/scripts/process.R",
pwd = "/home/marc/src/mRc_repo/shinyTools/tmp")
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
source("R/RProcessStart.R")
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "/home/marc/src/mRc_repo/shinyTools/scripts/process.R",
logFile = "/home/marc/src/mRc_repo/shinyTools/log/log.log",
sessionid = "savethewales",
pwd = "/home/marc/src/mRc_repo/shinyTools/tmp")
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "/home/marc/src/mRc_repo/shinyTools/scripts/process.R",
logFile = NULL, #"/home/marc/src/mRc_repo/shinyTools/log/log.log",
sessionid = "savethewales",
pwd = "/home/marc/src/mRc_repo/shinyTools/tmp")
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "/home/marc/src/mRc_repo/shinyTools/scripts/process.R",
logFile = "/home/marc/src/mRc_repo/shinyTools/log/log.log",
sessionid = NULL, #"savethewales",
pwd = "/home/marc/src/mRc_repo/shinyTools/tmp")
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
source("R/RProcessStart.R")
check <- function(object, add){ if(object == add$n) return(paste("Don't use", add$n))}
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "/home/marc/src/mRc_repo/shinyTools/scripts/process.R",
logFile = "/home/marc/src/mRc_repo/shinyTools/log/log.log",
pwd = "/home/marc/src/mRc_repo/shinyTools/tmp",
checkFun = "check", addArgs = list(n = 4))
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
roxygen2::roxygenise()
library(shinyTools)
?RProcessStart
Fin
?fin
?Fin
?Up
Up
Init
?Init
sqrt(-2)
try(sqrt(-2))
class(try(sqrt(-2)))
roxygen2::roxygenise()
library(shinyTools)
check <- function(object, add){ if(object == add$n) return(paste("Don't use", add$n))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("RProcess"),
numericInput("num1", "Number1", 2, 1, 5),
RProcessStartUI("process"),
actionButton("trigger", "Multiply number1"),
helpText("This is done in R batch script."), br(),
numericInput("num2", "Number2", 2, 1, 5),
helpText("Number2 is multiplied in app.")
),
mainPanel(h2("Result of number1"), verbatimTextOutput("res1"),
h2("Result of number2"), verbatimTextOutput("res2"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "/home/marc/src/mRc_repo/shinyTools/scripts/process.R",
logFile = "/home/marc/src/mRc_repo/shinyTools/log/log.log",
pwd = "/home/marc/src/mRc_repo/shinyTools/tmp",
checkFun = "check", addArgs = list(n = 4))
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
?normalizePath
?system2
getwd()
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R",
logFile = "./log/log.log",
pwd = "./tmp",
checkFun = "check", addArgs = list(n = 4))
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
library(shinyTools)
check <- function(object, add){ if(object == add$n) return(paste("Don't use", add$n))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("RProcess"),
numericInput("num1", "Number1", 2, 1, 5),
RProcessStartUI("process"),
actionButton("trigger", "Multiply number1"),
helpText("This is done in R batch script."), br(),
numericInput("num2", "Number2", 2, 1, 5),
helpText("Number2 is multiplied in app.")
),
mainPanel(h2("Result of number1"), verbatimTextOutput("res1"),
h2("Result of number2"), verbatimTextOutput("res2"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R",
logFile = "./log/log.log",
pwd = "./tmp",
checkFun = "check", addArgs = list(n = 4))
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "/home/marc/src/mRc_repo/shinyTools/scripts/process.R",
logFile = "/home/marc/src/mRc_repo/shinyTools/log/log.log",
pwd = "/home/marc/src/mRc_repo/shinyTools/tmp",
checkFun = "check", addArgs = list(n = 4))
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
?sqrt
complex(real = 1, imaginary = 1)
1i
1i^2
sqrt(-1)
sqrt(-1 + 0i)
Im(1)
Conj(2)
Arg(2)
ln(10)
log(10)
log(-10)
dpois(1:10, -1)
dbinom(1:10, 4, 0.5)
dbinom(1:10, -3, 0.5)
dbinom(1:10, -3, -1)
dbinom(1:10, 4, -1)
?dbinom(1:10, 4, -1)
1+"asd"
dpois(1:100, 5)
plot(1:100, dpois(1:100, input))
plot(1:100, dpois(1:100, 5))
plot(1:100, dpois(1:100, 5), pty = 3)
plot(1:100, dpois(1:100, 5), pty = 2)
plot(1:100, dpois(1:100, 5), pty = 2, main = "asd")
plot(1:100, dpois(1:100, 5), bty = "n", type = 2)
plot(1:100, dpois(1:100, 5), bty = "n", pch = 3)
plot(1:100, dpois(1:100, 5), bty = "n", pch = 20)
asd <- plot(1:100, dpois(1:100, 5), bty = "n", pch = 20)
asd
ggplot2::qplot(1:100, dpois(1:100, input))
ggplot2::qplot(1:100, dpois(1:100, 10))
check <- function(object, add){ if(object < add$n) return(paste("Lambda must be greater", add$n, "idiot"))}
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), plotOutput("res1"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
#output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
