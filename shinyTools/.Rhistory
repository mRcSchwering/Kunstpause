h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
shinyApp(ui, server)
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggle, toggleState("file"))
}
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
#useShinyjs(debug = TRUE),
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggle, toggleState("file"))
}
shinyApp(ui, server)
library(shiny)
source("R/FileUpload.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
#useShinyjs(debug = TRUE),
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
source("check.R")
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggle, toggleState("file"))
}
shinyApp(ui, server)
library(shinyjs)
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
useShinyjs(debug = TRUE),
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
useShinyjs(debug = TRUE),
h2("Upload a File"),
div( id = "form", FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE)),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
useShinyjs(debug = TRUE),
h2("Upload a File"),
div(id = "file", FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE)),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
shinyApp(ui, server)
library(shinyTools)
?FileUpload
library(shinyTools)
library(shinyTools)
?FileUpload
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("FileUploadUI"),
FileUploadUI("uploadID", "Upload File", rename = "Rename File", multiple = TRUE)
),
mainPanel( width = 8, h2("Return value of FileUpload"),
verbatimTextOutput("content1")
)
))
library(shiny)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("FileUploadUI"),
FileUploadUI("uploadID", "Upload File", rename = "Rename File", multiple = TRUE)
),
mainPanel( width = 8, h2("Return value of FileUpload"),
verbatimTextOutput("content1")
)
))
library(FileUpload)
library(shinyTools)
FileUploadUI("uploadID", "Upload File", rename = "Rename File", multiple = TRUE)
library(shiny)
library(shinyTools)
FileUploadUI("uploadID", "Upload File", rename = "Rename File", multiple = TRUE)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("FileUploadUI"),
FileUploadUI("uploadID", "Upload File", rename = "Rename File", multiple = TRUE)
),
mainPanel( width = 8, h2("Return value of FileUpload"),
verbatimTextOutput("content1")
)
))
server <-function(input, output, session) {
info <- callModule(FileUpload, "uploadID", rename = TRUE, checkFile = "check", checkNames = "check2")
output$content1 <- renderPrint(info())
}
shinyApp(ui, server)
check2 <- function(names, add){ if(any(grepl(add$pat, names))) return(paste("Don't use", add$pat, "in a file name."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("FileUploadUI"),
FileUploadUI("uploadID", "Upload File", rename = "Rename File", multiple = TRUE)
),
mainPanel( width = 8, h2("Return value of FileUpload"),
verbatimTextOutput("content1")
)
))
server <-function(input, output, session) {
info <- callModule(FileUpload, "uploadID", rename = TRUE, checkNames = "check2", addArgs = list(pat = "a"))
output$content1 <- renderPrint(info())
}
shinyApp(ui, server)
check1 <- function(df, add){ if(any(grepl(add$type, df$type))) return(paste("Don't upload", add$type, "files."))}
check2 <- function(names, add){ if(any(grepl(add$pat, names))) return(paste("Don't use", add$pat, "in a file name."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("FileUploadUI"),
FileUploadUI("uploadID", "Upload File", rename = "Rename File", multiple = TRUE)
),
mainPanel( width = 8, h2("Return value of FileUpload"),
verbatimTextOutput("content1")
)
))
server <-function(input, output, session) {
info <- callModule(FileUpload, "uploadID", rename = TRUE, checkNames = "check2", checkFiles = "check1",
addArgs = list(pat = "a", type = "txt"))
output$content1 <- renderPrint(info())
}
shinyApp(ui, server)
check1 <- function(df, add){ if(any(grepl(add$type, df$type))) return(paste("Don't upload", add$type, "files."))}
check2 <- function(names, add){ if(any(grepl(add$pat, names))) return(paste("Don't use", add$pat, "in a file name."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("FileUploadUI"),
FileUploadUI("uploadID", "Upload File", rename = "Rename File", multiple = TRUE)
),
mainPanel( width = 8, h2("Return value of FileUpload"),
verbatimTextOutput("content1")
)
))
server <-function(input, output, session) {
info <- callModule(FileUpload, "uploadID", rename = TRUE, checkNames = "check2", checkFiles = "check1",
addArgs = list(pat = "a", type = "text"))
output$content1 <- renderPrint(info())
}
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("FileUploadUI"),
FileUploadUI("uploadID", "Upload File", rename = "Rename File", multiple = TRUE, horiz = TRUE)
),
mainPanel( width = 8, h2("Return value of FileUpload"),
verbatimTextOutput("content1")
)
))
server <-function(input, output, session) {
info <- callModule(FileUpload, "uploadID", rename = TRUE, checkNames = "check2", checkFiles = "check1",
addArgs = list(pat = "a", type = "text"))
output$content1 <- renderPrint(info())
}
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(shinyTools)
check1 <- function(df, add){ if(any(grepl(add$type, df$type))) return(paste("Don't upload", add$type, "files."))}
check2 <- function(names, add){ if(any(grepl(add$pat, names))) return(paste("Don't use", add$pat, "in a file name."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("FileUploadUI"),
FileUploadUI("uploadID", "Upload File", rename = "Rename File", multiple = TRUE, horiz = TRUE)
),
mainPanel( width = 8, h2("Return value of FileUpload"),
verbatimTextOutput("content1")
)
))
server <-function(input, output, session) {
info <- callModule(FileUpload, "uploadID", rename = TRUE, checkNames = "check2", checkFiles = "check1",
addArgs = list(pat = "a", type = "text"))
output$content1 <- renderPrint(info())
}
shinyApp(ui, server)
library(shinyTools)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("FileUploadUI"),
FileUploadUI("uploadID", "Upload File", rename = "Rename File", multiple = TRUE, horiz = TRUE)
),
mainPanel( width = 8, h2("Return value of FileUpload"),
verbatimTextOutput("content1")
)
))
library(shiny)
library(shinyTools)
?FileUpload
library(shinyTools)
?FileUpload
lines <- c(">ENSG00000139083_0_0.3", "GCCTGCTCAGTGTAGCATTA", ">ENSG00000139083_11_61387.34124",
"GGGAACATGAAGTGGCGTCG", ">ENSG00000139083_3_61387.34150", "GTGAGTGTTCGTGACCCGAG", ">ENSG00000139083_9_61387.34118",
"GAGGAAGCGTAACTCGGCAC", ">ENSG00000139083_8_61387.34117", "GGGAAGCGTAACTCGGCACT", ">ENSG00000139083_10_61387.34120",
"GGCGTCGAGGAAGCGTAACT", ">ENSG00000139083_49_184161.78616")
pat <- "^.*(SG.+?)1.*_(.+?)_.*$"
ncaps <- stringr::str_count(pat, "\\(.+?\\)")
lines2 <- lines[grepl(pat, lines)]
capts <- regexec(pat, lines2)
i <- 1
s <- lines2[i]
cs <- capts[[i]]
m <- sapply(2:length(cs), function(x) matrix(c(x - 1, cs[x], cs[x] + attr(cs, "match.length")[x] - 1), ncol = 1))
bl <- 1:nchar(s) %in% unlist(apply(m[-1, ], 2, function(x) x[1]:x[2]))
gap <- FALSE
o <- NULL
for( n in 1:length(bl) ){
if( !bl[n] ){
if( gap ) o[2, ncol(o)] <- n else {gap <- TRUE; o <- cbind(o, c(n, n))}
} else gap <- FALSE
}
o <- rbind(rep(0, ncol(o)), o)
tab <- sapply(sort(c(o[2, ], m[2, ])), function(x) if(x %in% o[2, ]) o[, o[2, ] == x] else m[, m[2, ] == x])
tab <- rbind(tabapply(tab, 2, function(x) substr(s, x[2], x[3])))
tab <- rbind(tab, apply(tab, 2, function(x) substr(s, x[2], x[3])))
tab
regexec(pat, s)
GetCaptures <- function(s, pat){
cs <- regexec(pat, s)[[1]]
m <- sapply(2:length(cs), function(x) matrix(c(x - 1, cs[x], cs[x] + attr(cs, "match.length")[x] - 1), ncol = 1))
bl <- 1:nchar(s) %in% unlist(apply(m[-1, ], 2, function(x) x[1]:x[2]))
gap <- FALSE
o <- NULL
for( n in 1:length(bl) ){
if( !bl[n] ){
if( gap ) o[2, ncol(o)] <- n else {gap <- TRUE; o <- cbind(o, c(n, n))}
} else gap <- FALSE
}
o <- rbind(rep(0, ncol(o)), o)
sapply(sort(c(o[2, ], m[2, ])), function(x) if(x %in% o[2, ]) o[, o[2, ] == x] else m[, m[2, ] == x])
}
pat
GetCaptures(lines2[1], pat)
GetCaptures(lines2[2], pat)
GetCaptures(lines2[3], pat)
pat <- "^(.+?)(_.*)$"
GetCaptures(lines2[3], pat)
i <- 1
i <- 3
s <- lines2[i]
s
cs <- capts[[i]]
cs
cs <- regexec(pat, s)[[1]]
cs
m <- sapply(2:length(cs), function(x) matrix(c(x - 1, cs[x], cs[x] + attr(cs, "match.length")[x] - 1), ncol = 1))
m
bl <- 1:nchar(s) %in% unlist(apply(m[-1, ], 2, function(x) x[1]:x[2]))
bl
gap <- FALSE
o <- NULL
for( n in 1:length(bl) ){
if( !bl[n] ){
if( gap ) o[2, ncol(o)] <- n else {gap <- TRUE; o <- cbind(o, c(n, n))}
} else gap <- FALSE
}
o <- rbind(rep(0, ncol(o)), o)
o
sort(c(o[2, ], m[2, ])
)
sapply(sort(c(o[2, ], m[2, ])), function(x) if(x %in% o[2, ]) o[, o[2, ] == x] else m[, m[2, ] == x])
GetCaptures <- function(s, pat){
cs <- regexec(pat, s)[[1]]
m <- sapply(2:length(cs), function(x) matrix(c(x - 1, cs[x], cs[x] + attr(cs, "match.length")[x] - 1), ncol = 1))
bl <- 1:nchar(s) %in% unlist(apply(m[-1, ], 2, function(x) x[1]:x[2]))
gap <- FALSE
o <- NULL
for( n in 1:length(bl) ){
if( !bl[n] ){
if( gap ) o[2, ncol(o)] <- n else {gap <- TRUE; o <- cbind(o, c(n, n))}
} else gap <- FALSE
}
if(!is.null(o)) o <- rbind(rep(0, ncol(o)), o)
sapply(sort(c(o[2, ], m[2, ])), function(x) if(x %in% o[2, ]) o[, o[2, ] == x] else m[, m[2, ] == x])
}
GetCaptures(lines2[3], pat)
GetCaptures(lines2[4], pat)
GetCaptures(lines2[5], pat)
pat <- "^(.+?)(_.*?)_(.*?)$"
GetCaptures(lines2[5], pat)
pat <- "^.*(SG.+?)1.*_(.+?)_.*$"
GetCaptures(lines2[5], pat)
?substr
?substr
GetCaptures <- function(s, pat){
cs <- regexec(pat, s)[[1]]
m <- sapply(2:length(cs), function(x) matrix(c(x - 1, cs[x], cs[x] + attr(cs, "match.length")[x] - 1), ncol = 1))
bl <- 1:nchar(s) %in% unlist(apply(m[-1, ], 2, function(x) x[1]:x[2]))
gap <- FALSE
o <- NULL
for( n in 1:length(bl) ){
if( !bl[n] ){
if( gap ) o[2, ncol(o)] <- n else {gap <- TRUE; o <- cbind(o, c(n, n))}
} else gap <- FALSE
}
if(!is.null(o)) o <- rbind(rep(0, ncol(o)), o)
sapply(sort(c(o[2, ], m[2, ])), function(x) if(x %in% o[2, ]) o[, o[2, ] == x] else m[, m[2, ] == x])
}
s <- ">ENSG00000139083_0_0.3"
pat <- "^.*(SG.+?)1.*_(.+?)_.*$"
m <- GetCaptures(s, pat)
m
apply(m, 2, function(x) substr(s, x[2], x[3]))
rbind(paste("c m[1, ]"), apply(m, 2, function(x) substr(s, x[2], x[3])))
rbind(paste("c", m[1, ]), apply(m, 2, function(x) substr(s, x[2], x[3])))
s <- ">ENSG00000139083_8_61387.34117"
source("R/GetCaptures.R")
s <- ">ENSG00000139083_8_61387.34117"
pat <- "^.*(SG.+?)1.*_(.+?)_.*$"
GetCaptures(s, pat)
source("R/GetCaptures.R")
GetCaptures(s, pat)
pat <- "^.*$"
GetCaptures(s, pat)
pat <- "^.(.+?)*$"
GetCaptures(s, pat)
pat <- "^.(_.+?)*$"
GetCaptures(s, pat)
pat <- "^.(_.+?)(.*)*$"
GetCaptures(s, pat)
regexec(pat, s)[[1]]
pat <- "^.+(_.+?).*$"
regexec(pat, s)[[1]]
GetCaptures(s, pat)
source("R/GetCaptures.R")
pat <- "^.(_.+?).*$"
regexec(pat, s)[[1]]
GetCaptures(s, pat)
pat <- "^.+(_.+?).*$"
regexec(pat, s)[[1]]
GetCaptures(s, pat)
source("R/GetCaptures.R")
GetCaptures(s, pat)
pat <- "^.(_.+?).*$"
GetCaptures(s, pat)
source("R/GetCaptures.R")
GetCaptures(s, pat)
pat <- "^.+(_.+?).*$"
s <- ">ENSG00000139083_8_61387.34117"
regexec(pat, s)[[1]]
GetCaptures(s, pat)
source("R/GetCaptures.R")
GetCaptures(s, pat)
regexec(pat, s)[[1]]
source("R/GetCaptures.R")
m <- GetCaptures(s, pat)
m
m[-1, ]
m
apply(m, 2, function(x) x[2]:x[3])
m
pat <- "^.*(SG.+?)1.*_(.+?)_.*$"
m <- GetCaptures(s, pat)
m
apply(m, 2, function(x) x[2]:x[3])
unlist(apply(m, 2, function(x) x[2]:x[3]))
pat <- "^.+(_.+?).*$"
m <- GetCaptures(s, pat)
m
apply(m, 2, function(x) x[2]:x[3])
unlist(apply(m, 2, function(x) x[2]:x[3]))
m
m[2:3, 1]
m[2, 1] : m[3, 1]
pat <- "^.+(_.+).*$"
m <- GetCaptures(s, pat)
m
m[2, 1] : m[3, 1]
rm(m)
source("R/GetCaptures.R")
s <- ">ENSG00000139083_8_61387.34117"
pat <- "^.*(SG.+?)1.*_(.+?)_.*$"
GetCaptures(s, pat)
pat <- "^.+(_.+).*$"
GetCaptures(s, pat)
pat <- "^.+(_.+?).*$"
GetCaptures(s, pat)
pat <- "^.*(![a-zA-Z0-9]+).*_(.*?)_.*(.\\..).*$"
GetCaptures(s, pat)
pat <- "^.*(![a-zA-Z0-9]+).*$"
GetCaptures(s, pat)
pat <- "^.*([a-zA-Z0-9]+).*$"
GetCaptures(s, pat)
pat <- "^.*([!a-zA-Z0-9]+).*$"
GetCaptures(s, pat)
pat <- "^.*(^[a-zA-Z0-9]+).*$"
GetCaptures(s, pat)
pat <- "^.*([^a-zA-Z0-9]+).*$"
GetCaptures(s, pat)
apply(GetCaptures(s, pat), 2, function(x) substr(s, x[2], x[3]))
pat <- "^.*([^a-zA-Z0-9]+).*_(.*?)_.*$"
GetCaptures(s, pat)
apply(GetCaptures(s, pat), 2, function(x) substr(s, x[2], x[3]))
source("R/GetCaptures.R")
GetCaptures(s, pat)
source("R/GetCaptures.R")
GetCaptures(s, pat)
s
pat
source("R/GetCaptures.R")
GetCaptures(s, pat)
source("R/GetCaptures.R")
GetCaptures(s, pat)
apply(GetCaptures(s, pat), 2, function(x) substr(s, x[2], x[3]))
source("R/GetCaptures.R")
GetCaptures(s, pat)
source("R/GetCaptures.R")
GetCaptures(s, pat)
source("R/GetCaptures.R")
m <- GetCaptures(s, pat)
1:nchar(s)
ncol(m)
ncol(m) == 1
ncol(m) > 1
source("R/GetCaptures.R")
GetCaptures(s, pat)
apply(GetCaptures(s, pat), 2, function(x) substr(s, x[2], x[3]))
rm(m)# little app with module
GetCaptures(s, pat)
apply(GetCaptures(s, pat), 2, function(x) substr(s, x[2], x[3]))
pat <- "^.*([^a-zA-Z0-9]+).*_(.*?)_.*(.\\..).*$"
GetCaptures(s, pat)
apply(GetCaptures(s, pat), 2, function(x) substr(s, x[2], x[3]))
pat <- "^.*([^a-zA-Z0-9]+).*_(.*?)_.*(....)$"
GetCaptures(s, pat)
apply(GetCaptures(s, pat), 2, function(x) substr(s, x[2], x[3]))
pat <- "^.*([^a-zA-Z0-9]+).*$"
GetCaptures(s, pat)
apply(GetCaptures(s, pat), 2, function(x) substr(s, x[2], x[3]))
pat <- "^.*[^a-zA-Z0-9]+.*$"
GetCaptures(s, pat)
GetCaptures(s, pat)
source("R/GetCaptures.R")
GetCaptures(s, pat)
source("R/GetCaptures.R")
GetCaptures(s, pat)
pat <- "^.*(\\.\\.).*$"
GetCaptures(s, pat)
s <- ">ENSG00000139083_8_61387.34117"
pat <- "^.*(SG.+?)1.*_(.+?)_.*$"
m <- GetCaptures(s, pat)
apply(m, 2, function(x) substr(s, x[2], x[3]))
rm(s, pat, m)
s <- ">ENSG00000139083_8_61387.34117"
pat <- "^.*(SG.+?)1.*_(.+?)_.*$"
m <- GetCaptures(s, pat)
apply(m, 2, function(x) substr(s, x[2], x[3]))
?substr
?regex
?grepl
source("R/GetCaptures.R")
pat <- "^.*((SG.+?)1.*_(.+?))_.*$"
s <- ">ENSG00000139083_8_61387.34117"
m <- GetCaptures(s, pat)
