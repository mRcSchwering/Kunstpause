lapply(1:2, function(x) textInput(paste0("textInput_", x), NULL))
unlist(lapply(1:2, function(x) textInput(paste0("textInput_", x), NULL)))
tagList(lapply(1:2, function(x) textInput(paste0("textInput_", x), NULL)))
?textInput
source("R/ReactiveTextInput.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, 0, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
a <- NULL
a[5]
paste("Input", 1:5)
1:10%%1
(1:10%%1) + 1
(1:10%%2) + 1
(1:10%%3) + 1
1:10%%3 + 1
1:10%%NULL + 1
1:10%%NULL
source("R/ReactiveTextInput.R")
source("R/ReactiveTextInput.R")
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
1:10%in%3
1:10%%3
a <- c(1,2,3)
a[0]
a[1]
1:10%%3 + 1
1:10%%(3 + 1)
1:10%%2 + 1
(1:10+1)%%2
(1:10+1)%%2 + 1
(1:10+1)%%3 + 1
(1:10+2)%%3 + 1
(1:10+2)%%2 + 1
3%%1:10
1:10%%3
1:10%%4
1:10%%5
1:10%%2
1:10%%1
1:10%%3
1:10%%3 + 1
1:10%%(3 + 1)
1:10%%3 + 1
?%%
?mode()
modulus
?'%%'
+1
+ 1
+ x
+ i
1:10%%3 + 1
(1:10 - 1)%%3 + 1
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
1:10 - 1
(1:10 - 1)%%3
(1:10 - 1)%%3 + 1
(1 - 1)%%3 + 1
(2 - 1)%%3 + 1
(3 - 1)%%3 + 1
source("R/ReactiveTextInput.R")
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), dummies = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
?textInput
source("R/ReactiveTextInput.R")
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), dummies = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
sapply(1:3, function(x) "asd")
source("R/ReactiveTextInput.R")
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
c(1,2,3,NULL)
a <- list(1,2,3)
a[[1]]
a[[4]]
a <- list(a = 1,b = 2,c = 3)
a$a
a$d
sapply(1:3, function(x) a[[letters[x]]])
sapply(1:4, function(x) a[[letters[x]]])
str(sapply(1:3, function(x) a[[letters[x]]]))
class(sapply(1:3, function(x) a[[letters[x]]]))
class(sapply(1:4, function(x) a[[letters[x]]]))
source("R/ReactiveTextInput.R")
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
source("R/ReactiveTextInput.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
library(shiny)
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = "NULL", values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = "Group", values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
source("R/ReactiveTextInput.R")
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = "Group", values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = "Group",
dummies = c("asd1", "asd2", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = "Group",
values = c("Untreated", "Treated"), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
roxygen2::roxygenise()
library(shinyTools)
?ReactiveTextInput
?ReactiveTextInput
roxygen2::roxygenise()
library(shinyTools)
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = "Group",
values = c("Untreated", "Treated"), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
?ReactiveTextInput
Process
Rprocess
system.time
system.time()
today()
Sys.time()
c(Sys.time(), Sys.time())
?system2
length(NULL)
class(c("asd", "asdf"))
class(c(1:2))
getwd()
getwd()
setwd("/home/marc/src/mRc_repo/shinyTools/tmp")
?scan
paste("status", "", sep = ";")
as.character(Sys.time())
?Sys.time()
?format
format(Sys.time(), "%Y-%m-%d")
format(Sys.time(), "%Y-%m-%d_%h:%m")
format(Sys.time(), "%Y-%m-%d_%H:%M")
sample(0:9, 4, replace = TRUE)
paste0("sign;", format(Sys.time(), "%Y-%m-%d_%H%M_"), sample(0:9, 4, replace = TRUE), collapse = "")
paste0("sign;", format(Sys.time(), "%Y-%m-%d_%H%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
info <- c(paste0("progress;", 0), "status",
paste0("sign;", format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = "")),
paste0("ifof;", 0))
info
setwd("/home/marc/src/mRc_repo/shinyTools/tmp")
?write()
write(info, "id1.status")
setwd("/home/marc/src/mRc_repo/shinyTools/tmp")
info <- c(paste0("progress;", 0), "status",
paste0("sign;", format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = "")),
paste0("ifof;", "id1.rds"))
write(info, "id1.status")
rm(info)
setwd("/home/marc/src/mRc_repo/shinyTools")
getwd()
setwd("/home/marc/src/mRc_repo/shinyTools/tmp")
info <- c(paste0("progress;", 0), "status",
paste0("sign;", format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = "")),
paste0("ifof;", "id1.rds"), paste0("pwd;", getwd()))
write(info, "id1.status")
rm(info)
setwd("/home/marc/src/mRc_repo/shinyTools")
statusFile <- "/home/marc/src/mRc_repo/shinyTools/tmp/id1.status"
ggplot2::mtcars
data("mtcars")
str(mtcars)
data <- data("mtcars", package = "ggplot2")
data <- data("mtcars", package = "highcharter")
rm(mtcars)
?data
data <- data(mtcars)
rm(mtcars)
rm(data)
data("mtcars", package = ggplot2)
data("mtcars", package = "ggplot2")
mtcars
mtcars <- mtcars
setwd("/home/marc/src/mRc_repo/shinyTools/tmp")
write(mtcars, "id1.rds")
saveRDS(mtcars, "id1.rds")
info <- c(paste0("progress;", 0), "status",
paste0("sign;", format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = "")),
paste0("ifof;", "id1.rds"), paste0("pwd;", getwd()))
write(info, "id1.status")
rm(info, mtcars)
setwd("/home/marc/src/mRc_repo/shinyTools")
statusFile <- "/home/marc/src/mRc_repo/shinyTools/tmp/id1.status"
?scan
scan(statusFile, "", sep = "\n")
readLines(statusFile)
readLines(statusFile)
info <- readLines(statusFile)
length(info)
strsplit(info[1], ";")
lapply(info, function(x) strsplit(info[x], ";"))
sapply(info, function(x) strsplit(info[x], ";"))
lapply(info, function(x) strsplit(x, ";"))
lapply(info, function(x){ o <- strsplit(x, ";")[-1]; names(o) <- strsplit(x, ";")[1]; o})
lapply(info, function(x) strsplit(x, ";"))
info <- lapply(info, function(x) strsplit(x, ";"))
lapply(info, function(x) x[1])
sapply(info, function(x) x[1])
sapply(info, function(x) x[[1]])
info
info <- readLines(statusFile)
sapply(info, function(x) strsplit(x, ";"))
strsplit(info, ";")
info <- strsplit(readLines(statusFile), ";")
info
sapply(info, function(x) x[1])
names(info) <- sapply(info, function(x) x[1])
info
sapply(info, function(x) x[-1])
info <- sapply(info, function(x) x[-1])
info
commandArgs(TRUE)
ReadInfo <- function(args = commandArgs(TRUE)){
return(args)
info <- strsplit(readLines(statusFile), ";")
names(info) <- sapply(info, function(x) x[1])
info <- sapply(info, function(x) x[-1])
info$statusFile <- statusFile
}
ReadInfo()
ReadInfo <- function(args = commandArgs(TRUE)){
info <- strsplit(readLines(args[1]), ";")
names(info) <- sapply(info, function(x) x[1])
info <- sapply(info, function(x) x[-1])
info$statusFile <- args[1]
info
}
ReadInfo(commandArgs(TRUE))
ReadInfo <- function(args = commandArgs(TRUE)){
if(length(args) < 1) stop("Argument args is empty")
info <- strsplit(readLines(args[1]), ";")
names(info) <- sapply(info, function(x) x[1])
info <- sapply(info, function(x) x[-1])
info$statusFile <- args[1]
info
}
rm(info, statusFile)
ReadInfo(commandArgs(TRUE))
ReadInfo("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
info <- ReadInfo("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
?info
Update
?Update
ls
ls()
class(ls())
sapply(ls(), class)
expression(ls())
sapply(ls(), function(x) class(expression(x)))
?Filter
et()
?get()
Info <- function(args = commandArgs(TRUE)){
if(length(args) < 1) stop("Argument args is empty")
info <- strsplit(readLines(args[1]), ";")
names(info) <- sapply(info, function(x) x[1])
info <- sapply(info, function(x) x[-1])
info$statusFile <- args[1]
class(info) <- "ProcessStatus"
info
}
rm(ReadInfo())
rm(ReadInfo)
info <- Info("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
Filter(function(x) class(get(x)) == "ProcessStatus", ls())
?Update
rm(info)
iff <- Info("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
Update <- function(info = NULL){
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessStatus", ls())[1])
return(info)
}
Update()
ls()
Filter(function(x) class(get(x)) == "ProcessStatus", ls())
Filter(function(x) class(get(x)) == "ProcessStatus", ls())[1]
get(Filter(function(x) class(get(x)) == "ProcessStatus", ls())[1])
Update <- function(info = NULL){
return(ls())
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessStatus", ls())[1])
return(info)
}
Update()
Update <- function(info = NULL){
return(Filter(function(x) class(get(x)) == "ProcessStatus", ls()))
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessStatus", ls())[1])
return(info)
}
Update()
?ls
ls(pos = 1)
Update <- function(info = NULL){
return(Filter(function(x) class(get(x)) == "ProcessStatus", ls(pos = 1)))
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessStatus", ls())[1])
return(info)
}
Update()
Update <- function(info = NULL){
#return(Filter(function(x) class(get(x)) == "ProcessStatus", ls(pos = 1)))
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessStatus", ls(pos = 1))[1])
return(info)
}
Update()
sapply(1:length(iff), function(x) paste0(names(iff)[x], ";", paste(iff[[x]], collapse = ";")))
readLines(iff$statusFile, n = 3)
?readLines(iff$statusFile, n = 3)
strsplit(readLines(iff$statusFile, n = 3)[3], ";")
?quit
