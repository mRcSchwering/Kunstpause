}
Ptry(sum(1+a))
Ptry <- function(expr, ignore = FALSE, info = NULL){
#if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
#if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
res <- try(expr)
if(class(res) == "try-error"){
return(c("", "Expression:", quote(parse(text = expr)), "returned error:", res[1]))
} else {
return(res)
}
}
Ptry(sum(1+a))
Ptry <- function(expr, ignore = FALSE, info = NULL){
#if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
#if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
res <- try(expr)
if(class(res) == "try-error"){
return(c("", "Expression:", deparse(expr), "returned error:", res[1]))
} else {
return(res)
}
}
Ptry(sum(1+a))
substitute(sum(1+a))
Ptry <- function(expr, ignore = FALSE, info = NULL){
#if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
#if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
return(substitute(expr))
res <- try(expr)
if(class(res) == "try-error"){
return(c("", "Expression:", deparse(expr), "returned error:", res[1]))
} else {
return(res)
}
}
Ptry(sum(1+a))
eval(substitute(sum(1+a)))
eval(substitute(sum(1+1)))
Ptry <- function(expr, ignore = FALSE, info = NULL){
#if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
#if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
expr <- substitute(expr)
return(expr)
res <- try(expr)
if(class(res) == "try-error"){
return(c("", "Expression:", deparse(expr), "returned error:", res[1]))
} else {
return(res)
}
}
Ptry(sum(1+a))
deparse(substitute(sum(1+1)))
Ptry <- function(expr, ignore = FALSE, info = NULL){
#if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
#if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
expr <- substitute(expr)
res <- try(eval(expr))
if(class(res) == "try-error"){
return(c("", "Expression:", deparse(expr), "returned error:", res[1]))
} else {
return(res)
}
}
Ptry(sum(1+a))
Ptry(sum(1+1))
paste("Quitting at", Sys.time())
?stop
Ptry <- function(expr, ignore = FALSE, info = NULL){
# get process info
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
# eval expr
expr <- substitute(expr)
res <- try(eval(expr))
# action
if(class(res) == "try-error"){
out <- NULL
log <- c("", "Expression:", deparse(expr), "returned error:", res[1])
if(!ignore) log <- c(log, "", paste("Quitting at", Sys.time()))
if(!is.null(info$sessionid)) log <- paste(info$sessionid, log, sep = " : ")
if(!is.null(info$logFile)) write(log, info$logFile, append = TRUE)
if(!ignore) quit("no", 0)
} else {
out <- res
}
out
}
Ptry(sum(1+1))
Ptry(sum(1+a), ignore = TRUE)
Ptry <- function(expr, ignore = FALSE, info = NULL){
# get process info
#if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
# eval expr
expr <- substitute(expr)
res <- try(eval(expr))
# action
if(class(res) == "try-error"){
out <- NULL
log <- c("", "Expression:", deparse(expr), "returned error:", res[1])
#if(!ignore) log <- c(log, "", paste("Quitting at", Sys.time()))
#if(!is.null(info$sessionid)) log <- paste(info$sessionid, log, sep = " : ")
#if(!is.null(info$logFile)) write(log, info$logFile, append = TRUE)
#if(!ignore) quit("no", 0)
} else {
out <- res
}
out
}
Ptry(sum(1+a), ignore = TRUE)
Ptry <- function(expr, ignore = FALSE, info = NULL){
# get process info
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
# eval expr
expr <- substitute(expr)
res <- try(eval(expr))
# action
if(class(res) == "try-error"){
out <- NULL
log <- c("", "Expression:", deparse(expr), "returned error:", res[1])
#if(!ignore) log <- c(log, "", paste("Quitting at", Sys.time()))
#if(!is.null(info$sessionid)) log <- paste(info$sessionid, log, sep = " : ")
#if(!is.null(info$logFile)) write(log, info$logFile, append = TRUE)
#if(!ignore) quit("no", 0)
} else {
out <- res
}
out
}
Ptry(sum(1+a), ignore = TRUE)
Ptry <- function(expr, ignore = FALSE, info = NULL){
# get process info
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
return(info)
# eval expr
expr <- substitute(expr)
res <- try(eval(expr))
# action
if(class(res) == "try-error"){
out <- NULL
log <- c("", "Expression:", deparse(expr), "returned error:", res[1])
#if(!ignore) log <- c(log, "", paste("Quitting at", Sys.time()))
#if(!is.null(info$sessionid)) log <- paste(info$sessionid, log, sep = " : ")
#if(!is.null(info$logFile)) write(log, info$logFile, append = TRUE)
#if(!ignore) quit("no", 0)
} else {
out <- res
}
out
}
Ptry(sum(1+a), ignore = TRUE)
Ptry <- function(expr, ignore = FALSE, info = NULL){
expr <- substitute(expr)
# get process info
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
return(info)
# eval expr
res <- try(eval(expr))
# action
if(class(res) == "try-error"){
out <- NULL
log <- c("", "Expression:", deparse(expr), "returned error:", res[1])
#if(!ignore) log <- c(log, "", paste("Quitting at", Sys.time()))
#if(!is.null(info$sessionid)) log <- paste(info$sessionid, log, sep = " : ")
#if(!is.null(info$logFile)) write(log, info$logFile, append = TRUE)
#if(!ignore) quit("no", 0)
} else {
out <- res
}
out
}
Ptry(sum(1+a), ignore = TRUE)
Ptry <- function(expr, ignore = FALSE, info = NULL){
# eval expr
expr <- substitute(expr)
res <- try(eval(expr))
# get process info
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
# action
if(class(res) == "try-error"){
out <- NULL
log <- c("", "Expression:", deparse(expr), "returned error:", res[1])
if(!ignore) log <- c(log, "", paste("Quitting at", Sys.time()))
if(!is.null(info$sessionid)) log <- paste(info$sessionid, log, sep = " : ")
if(!is.null(info$logFile)) write(log, info$logFile, append = TRUE)
if(!ignore) quit("no", 0)
} else {
out <- res
}
out
}
Ptry(sum(1+a), ignore = TRUE)
Ptry(sum(1+2), ignore = TRUE)
Log
?Log
Log <- function(msg, info = NULL){
# get ProcessInfo object
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# create lines for log msg
log <- c("", log)
if(!is.null(info$sessionid)) log <- paste(info$sessionid, log, sep = " : ")
# write if necessary
if(!is.null(info$logFile)){
write(log, info$logFile, append = TRUE)
return(TRUE)
} else{
return(FALSE)
}
}
Log("asd")
Log <- function(msg, info = NULL){
# get ProcessInfo object
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# create lines for log msg
log <- c("", msg)
if(!is.null(info$sessionid)) log <- paste(info$sessionid, log, sep = " : ")
# write if necessary
if(!is.null(info$logFile)){
write(log, info$logFile, append = TRUE)
return(TRUE)
} else{
return(FALSE)
}
}
Log("asd")
Log(c("asd", "asd2"))
Log(c("asd", "asd2"), info = iff)
ProcessInit <- function( args = commandArgs(TRUE),
log = paste("Starting at", Sys.time()) ){
if(length(args) < 1) stop("Argument args is empty")
# reading info
info <- ReadInfo(args[1])
# logging
Log( c("", paste(rep("#", 40), collapse = ""), log, "", "ProcessInfo:", "",
sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";")))),
info = info )
# update progress
info$progress <- 0.1
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
rm(expr)
rm(res)
iff <- ProcessInit("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
ProcessUp <- function(progress, info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
# look for ProcessInfo object
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# check pid
pid <- ReadInfo(info$statusFile)$pid
if(pid != info$pid){
Log(paste("Process expired, quitting at", Sys.time()), info = info)
quit("no", 0)
} else {
Log(paste("Progress update to", progress), info = info)
}
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
iff <- ProcessUp(0.2)
Log <- function(msg, info = NULL){
# get ProcessInfo object
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# create lines for log msg
log <- c("", msg)
if(!is.null(info$sessionid)) log <- paste(info$sessionid, log, sep = " : ")
# write log after confirming pid
pid <- ReadInfo(info$statusFile)$pid
if(pid != info$pid){
if(!is.null(info$logFile)) write(paste("Process expired, quitting at", Sys.time()), info$logFile, append = TRUE)
quit("no", 0)
} else {
if(!is.null(info$logFile)){
write(log, info$logFile, append = TRUE)
return(TRUE)
} else {
return(FALSE)
}
}
}
Log("asd")
Log(1:2)
ProcessInit <- function( args = commandArgs(TRUE),
log = paste("Starting at", Sys.time()) ){
if(length(args) < 1) stop("Argument args is empty")
# reading info
info <- ReadInfo(args[1])
# logging
Log( c("", paste(rep("#", 40), collapse = ""), log, "", "ProcessInfo:", "",
sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";")))),
info = info )
# update progress
info$progress <- 0.1
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
iff <- ProcessInit("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
ProcessUp <- function(progress, info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
# look for ProcessInfo object
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# write log if pid valid
Log(paste("Progress update to", progress), info = info)
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
iff <- ProcessUp(0.2)
Ptry <- function(expr, ignore = FALSE, info = NULL){
# eval expr
expr <- substitute(expr)
res <- try(eval(expr))
# get process info
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
# action
if(class(res) == "try-error"){
Log(c("", "Expression:", deparse(expr), "returned error:", res[1]), info = info)
if(!ignore){
Log(c(log, "", paste("Quitting at", Sys.time())), info = info)
quit("no", 0)
}
out <- NULL
} else out <- res
out
}
Ptry(sum(1+2), ignore = TRUE)
Ptry(sum(a+2), ignore = TRUE)
Ptry <- function(expr, ignore = FALSE, info = NULL){
# eval expr
expr <- substitute(expr)
res <- try(eval(expr))
# get process info
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
# action
if(class(res) == "try-error"){
Log(c("Expression:", deparse(expr), "returned error:", res[1]), info = info)
if(!ignore){
Log(paste("Quitting at", Sys.time()), info = info)
quit("no", 0)
}
out <- NULL
} else out <- res
out
}
Ptry(sum(a+2), ignore = TRUE)
try(asd)[1]
cat(try(asd)[1])
Ptry <- function(expr, ignore = FALSE, info = NULL){
# eval expr
expr <- substitute(expr)
res <- try(eval(expr))
# get process info
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
# action
# in case of error write log and update status
if(class(res) == "try-error"){
Log(c("Expression:", deparse(expr), "returned error:", res[1]), info = info)
if(!ignore){
iff$progress <- 1
iff$status <- res[1]
Log(paste("Quitting at", Sys.time()), info = info)
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
quit("no", 0)
}
out <- NULL
} else out <- res
out
}
Ptry(sum(1+2), ignore = TRUE)
Ptry(sum(a+2), ignore = TRUE)
Ptry(sum(a+2))
setwd("/home/marc/src/mRc_repo/shinyTools/tmp")
saveRDS(mtcars, "id1.rds")
info <- c(paste0("progress;", 0),
paste0("pid;", format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = "")),
paste0("sessionid;", "id1234"),
"status",
paste0("pwd;", getwd()), paste0("ifof;", file.path(getwd(), "id1.rds")),
paste0("RScript;", "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"),
paste0("logFile;", "/home/marc/src/mRc_repo/shinyTools/log/log.log"))
write(info, "id1.status")
rm(info)
setwd("/home/marc/src/mRc_repo/shinyTools")
ReadInfo <- function(infoFile){
info <- strsplit(readLines(infoFile), ";")
names(info) <- sapply(info, function(x) x[1])
info <- sapply(info, function(x) x[-1])
info$statusFile <- infoFile
class(info) <- "ProcessInfo"
info
}
Log <- function(msg, info = NULL){
# get ProcessInfo object
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# create lines for log msg
log <- c("", msg)
if(!is.null(info$sessionid)) log <- paste(info$sessionid, log, sep = " : ")
# write log after confirming pid
pid <- ReadInfo(info$statusFile)$pid
if(pid != info$pid){
if(!is.null(info$logFile)) write(paste("Process expired, quitting at", Sys.time()), info$logFile, append = TRUE)
quit("no", 0)
} else {
if(!is.null(info$logFile)){
write(log, info$logFile, append = TRUE)
return(TRUE)
} else {
return(FALSE)
}
}
}
ProcessInit <- function( args = commandArgs(TRUE),
log = paste("Starting at", Sys.time()) ){
if(length(args) < 1) stop("Argument args is empty")
# reading info
info <- ReadInfo(args[1])
# logging
Log( c("", paste(rep("#", 40), collapse = ""), log, "", "ProcessInfo:", "",
sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";")))),
info = info )
# update progress
info$progress <- 0.1
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
ProcessUp <- function(progress, info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
# look for ProcessInfo object
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# write log if pid valid
Log(paste("Progress update to", progress), info = info)
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
Ptry <- function(expr, ignore = FALSE, info = NULL){
# eval expr
expr <- substitute(expr)
res <- try(eval(expr))
# get process info
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
# action
# in case of error write log and update status
if(class(res) == "try-error"){
Log(c("Expression:", deparse(expr), "returned error:", res[1]), info = info)
if(!ignore){
info$progress <- 1
info$status <- res[1]
Log(paste("Quitting at", Sys.time()), info = info)
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
quit("no", 0)
}
out <- NULL
} else out <- res
out
}
iff <- ProcessInit("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
iff <- ProcessUp(0.2)
Log("some log")
gsub("[[:punct:]]", "", "asd\n")
gsub("[^[:alnum:]]", "", "asd\n")
gsub("[^[:alnum:]]", "", "Some text komma, dot. ...dotted : asd\n")
gsub("\\", "", "Some text komma, dot. ...dotted : asd\n")
gsub("\\\", "", "Some text komma, dot. ...dotted : asd\n")
gsub("\n", "", "Some text komma, dot. ...dotted : asd\n")
seq(1:INF, 1)
seq(1:Inf, 1)
seq(1:Inf, 1)[1]
str(seq(1:Inf, 1)[1])
str(seq(1:Inf, 1))
str(try(seq(1:Inf, 1)))
cat(try(seq(1:Inf, 1)))
try(seq(1:Inf, 1))[1]
Ptry <- function(expr, ignore = FALSE, info = NULL){
# eval expr
expr <- substitute(expr)
res <- try(eval(expr))
# get process info
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(pos = 1))[1])
# action
# in case of error write log and update status
if(class(res) == "try-error"){
res <- gsub("\n", "", res[1])
Log(c("Expression:", deparse(expr), "returned error:", res), info = info)
if(!ignore){
info$progress <- 1
info$status <- res
Log(paste("Quitting at", Sys.time()), info = info)
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
quit("no", 0)
}
out <- NULL
} else out <- res
out
}
Ptry(sum(a+2))
?shinyTools::CapturePattern()
?shinyTools::CapturePattern
getwd()
roxygen2::roxygenise()
library(shinyTools)
?Try
