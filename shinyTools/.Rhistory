HTML(paste0("<div style='color:", cols[1], ";'>Some Text</div>"))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
m <- vector("list", nLines)
i <- 1
for( i in 1:nLines ){
m <- GetCaptures(lines[i], input$regex)
}
HTML(paste0("<div style='color:db4437;'>Some Text</div>"))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
m <- vector("list", nLines)
i <- 1
for( i in 1:nLines ){
m <- GetCaptures(lines[i], input$regex)
}
HTML(paste0('<font color="red">This is some text!</font>'))
})
}
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
uiOutput("captures")
)
))
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
m <- vector("list", nLines)
i <- 1
for( i in 1:nLines ){
m <- GetCaptures(lines[i], input$regex)
}
HTML(paste0('<font color="red">This is some text!</font>'))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
#m <- vector("list", nLines)
#i <- 1
#for( i in 1:nLines ){
#  m <- GetCaptures(lines[i], input$regex)
#}
HTML(paste0('<font color="red">This is some text!</font>'))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
#m <- vector("list", nLines)
#i <- 1
#for( i in 1:nLines ){
#  m <- GetCaptures(lines[i], input$regex)
#}
HTML(paste0('<font color="#4285f4">This is some text!</font>'))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
#m <- vector("list", nLines)
#i <- 1
#for( i in 1:nLines ){
#  m <- GetCaptures(lines[i], input$regex)
#}
HTML(paste0('<font color="', cols[1], '">This is some text!</font>'))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
txt <- character()
for( i in 1:n ){
m <- GetCaptures(x[i], pat)
m <- apply(rbind(m[1, ], apply(m, 2, function(s) substr(x, s[2], s[3]))), 2, function(ss){
if(as.integer(ss[1]) != 0) paste0('<font color="', cols[as.integer(ss[1])], '">', ss[2], "</font>") else ss[2]})
txt <- c(txt, paste(m, collapse = ""))
}
HTML(paste0("<tt>", paste( txt, collapse = "<br/>"), "</tt>"))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
x <- x[sample(1:length(x), n)]
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
txt <- character()
for( i in 1:n ){
m <- GetCaptures(x[i], pat)
m <- apply(rbind(m[1, ], apply(m, 2, function(s) substr(x, s[2], s[3]))), 2, function(ss){
if(as.integer(ss[1]) != 0) paste0('<font color="', cols[as.integer(ss[1])], '">', ss[2], "</font>") else ss[2]})
txt <- c(txt, paste(m, collapse = ""))
}
HTML(paste0("<tt>", paste( txt, collapse = "<br/>"), "</tt>"))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
x <- x[sample(1:length(x), n)]
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>"), "</tt>")))
txt <- character()
for( i in 1:n ){
m <- GetCaptures(x[i], pat)
m <- apply(rbind(m[1, ], apply(m, 2, function(s) substr(x, s[2], s[3]))), 2, function(ss){
if(as.integer(ss[1]) != 0) paste0('<font color="', cols[as.integer(ss[1])], '">', ss[2], "</font>") else ss[2]})
txt <- c(txt, paste(m, collapse = ""))
}
HTML(paste0("<tt>", paste( txt, collapse = "<br/>"), "</tt>"))
})
}
shinyApp(ui, server)
source("R/GetCaptures.R")
source("R/CapturePattern.R")
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = input$regex, lines = lib)
}
shinyApp(ui, server)
source("R/GetCaptures.R")
source("R/CapturePattern.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = input$regex, lines = lib)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(CapturePattern, "cap", input$regex, lines = lib)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = lib)
}
shinyApp(ui, server)
source("R/GetCaptures.R")
source("R/CapturePattern.R")
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
source("R/GetCaptures.R")
source("R/CapturePattern.R")
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
head(lib)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = lib)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
source("R/GetCaptures.R")
source("R/CapturePattern.R")
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
library(shinyTools)
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
library(shinyTools)
library(shiny)
library(shinyTools)
roxygen2::roxygenise()
library(shiny)
library(shinyTools)
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
library(shiny)
library(shinyTools)
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
roxygen2::roxygenise()
library(shiny)
library(shinyTools)
?CapturePattern
library(shiny)
library(shinyTools)
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE)),
helpText("Write your own Regex to try out.")
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
shinyApp(ui, server)
roxygen2::roxygenise()
library(shinyTools)
?CapturePattern
roxygen2::roxygenise()
roxygen2::roxygenise()
library(shiny)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(shinyTools)
library(shiny)
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("TextInputUI"),
TextInputUI("id1", c("positive Ctrls", "non-targeting Ctrls"), c("positive", "non-targeting"),
help = "use HGNC symbols", horiz = FALSE)
),
mainPanel(h2("Output of TextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(TextInput, "id1", n = 2, checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
?FileUpload()
check1 <- function(df, add){ if(any(grepl(add$type, df$type))) return(paste("Don't upload", add$type, "files."))}
check2 <- function(names, add){ if(any(grepl(add$pat, names))) return(paste("Don't use", add$pat, "in a file name."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("FileUploadUI"),
FileUploadUI("uploadID", "Upload File", rename = "Rename File", multiple = TRUE, horiz = TRUE)
),
mainPanel( width = 8, h2("Return value of FileUpload"),
verbatimTextOutput("content1")
)
))
server <-function(input, output, session) {
info <- callModule(FileUpload, "uploadID", rename = TRUE, checkNames = "check2", checkFiles = "check1",
addArgs = list(pat = "a", type = "text"))
output$content1 <- renderPrint(info())
}
shinyApp(ui, server)
?TextInput
roxygen2::roxygenise()
library(shinyTools)
?TextInput
library(shiny)
library(shinyTools)
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("TextInputUI"),
TextInputUI("id1", c("positive Ctrls", "non-targeting Ctrls"), c("positive", "non-targeting"),
help = "use HGNC symbols", horiz = FALSE)
),
mainPanel(h2("Output of TextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(TextInput, "id1", n = 2, checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
?CapturePattern
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
textInput("regex", "Regex"),
#selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE)),
helpText("Write your own Regex to try out.")
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
2%%2
1%%2
3%%2
4%%2
5%%2
6%%2
1:10%%2
rm(lib)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE)),
helpText("Write your own Regex to try out."),
br(), actionButton("push", "toggle")
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
lib <- eventReactive(input$push, {
if(input$push%%2 == 0){
lib <- NULL
} else {
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
}
NULL
})
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib()))
}
shinyApp(ui, server)
server <-function(input, output, session) {
lib <- eventReactive(input$push, {
if(input$push%%2 == 0){
lib <- NULL
} else {
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
}
lib
})
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib()))
}
shinyApp(ui, server)
