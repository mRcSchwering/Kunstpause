return(NULL)
} else {
out <- readRDS(file.path(pwd, paste0(id, ".rds")))
return(out)
}
}
})
output$progress <- renderUI({
if(is.null(status()) || status()$progress != "0"){
paste0('<div id="', id, 'progress">', progressText, ' ', round(as.numeric(status()$progress)*100), '%')
} else NULL
})
output$errorMessage_fin <- renderUI(HTML(paste0("<div style='color:red'>", error$text, "</div>")))
output$result <- renderPlot(if(is.null(result())) NULL else plot(1:length(result()), result(), pch = 20, bty="n"))
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process-"
pwd <- "./tmp"
progress <- "text" #"bar"
progressText <- "Processing..."
pwd <- normalizePath(pwd)
error <- reactiveValues(text = NULL)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, "ifof.status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
result <- eventReactive(status(), {
error$text <- NULL
if(is.null(status()) || status()$progress != "1") NULL else {
if( !is.null(status()$status) ){
error$text <- status()$status
return(NULL)
} else {
out <- readRDS(file.path(pwd, paste0(id, ".rds")))
return(out)
}
}
})
output$progress <- renderUI({
if(!is.null(status()) && status()$progress != "0"){
HTML(paste0('<div id="', id, 'progress">', progressText, ' ', round(as.numeric(status()$progress)*100), '%</div>'))
} else NULL
})
output$errorMessage_fin <- renderUI(HTML(paste0("<div style='color:red'>", error$text, "</div>")))
output$result <- renderPlot(if(is.null(result())) NULL else plot(1:length(result()), result(), pch = 20, bty="n"))
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process-"
pwd <- "./tmp"
progress <- "text" #"bar"
progressText <- "Processing..."
pwd <- normalizePath(pwd)
error <- reactiveValues(text = NULL)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, "ifof.status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
result <- eventReactive(status(), {
error$text <- NULL
if(is.null(status()) || status()$progress != "1") NULL else {
if( !is.null(status()$status) ){
error$text <- status()$status
return(NULL)
} else {
out <- readRDS(file.path(pwd, paste0(id, "ifof.rds")))
return(out)
}
}
})
output$progress <- renderUI({
if(!is.null(status()) && status()$progress != "0"){
HTML(paste0('<div id="', id, 'progress">', progressText, ' ', round(as.numeric(status()$progress)*100), '%</div>'))
} else NULL
})
output$errorMessage_fin <- renderUI(HTML(paste0("<div style='color:red'>", error$text, "</div>")))
output$result <- renderPlot(if(is.null(result())) NULL else plot(1:length(result()), result(), pch = 20, bty="n"))
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), uiOutput("errorMessage_fin"), uiOutput("progress_asd"),
plotOutput("result"), verbatimTextOutput("res2"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process-"
pwd <- "./tmp"
progress <- "text" #"bar"
progressText <- "Processing..."
pwd <- normalizePath(pwd)
error <- reactiveValues(text = NULL)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, "ifof.status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
result <- eventReactive(status(), {
error$text <- NULL
if(is.null(status()) || status()$progress != "1") NULL else {
if( !is.null(status()$status) ){
error$text <- status()$status
return(NULL)
} else {
out <- readRDS(file.path(pwd, paste0(id, "ifof.rds")))
return(out)
}
}
})
output$progress_asd <- renderUI({
if(!is.null(status()) && status()$progress != "0"){
HTML(paste0('<div id="', id, 'progress">', progressText, ' ', round(as.numeric(status()$progress)*100), '%</div>'))
} else NULL
})
output$errorMessage_fin <- renderUI(HTML(paste0("<div style='color:red'>", error$text, "</div>")))
output$result <- renderPlot(if(is.null(result())) NULL else plot(1:length(result()), result(), pch = 20, bty="n"))
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
Sys.time()
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), uiOutput("errorMessage_fin"), verbatimTextOutput("result"), verbatimTextOutput("res2"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process-"
pwd <- "./tmp"
pwd <- normalizePath(pwd)
error <- reactiveValues(text = NULL)
out <- reactiveValues(result = NULL, finished = NULL, progress = NULL, error = FALSE)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, "ifof.status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
observeEvent(status(), {
error$text <- NULL
out$finished <- NULL
out$result <- NULL
out$error <- FALSE
if( !is.null(status()) ){
out$progress <- status()$progress
if( status()$progress == "1" ){
out$finished <- Sys.time()
if( is.null(status()$status) ){
out$result <- readRDS(file.path(pwd, paste0(id, "ifof.rds")))
} else {
out$error <- TRUE
}
}
}
})
output$errorMessage_fin <- renderUI(HTML(paste0("<div style='color:red'>", error$text, "</div>")))
output$result <- renderPrint(out)
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process-"
pwd <- "./tmp"
pwd <- normalizePath(pwd)
error <- reactiveValues(text = NULL)
out <- reactiveValues(result = NULL, finished = NULL, progress = NULL, error = FALSE)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, "ifof.status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
observeEvent(status(), {
error$text <- NULL
out$finished <- NULL
out$result <- NULL
out$error <- FALSE
if( !is.null(status()) ){
out$progress <- status()$progress
if( status()$progress == "1" ){
out$finished <- Sys.time()
if( is.null(status()$status) ){
out$result <- readRDS(file.path(pwd, paste0(id, "ifof.rds")))
} else {
out$error <- TRUE
}
}
}
})
output$errorMessage_fin <- renderUI(HTML(paste0("<div style='color:red'>", error$text, "</div>")))
output$result <- renderPrint(list(result = out$result, finished = out$finished, progress = out$progress, error = out$error))
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process-"
pwd <- "./tmp"
pwd <- normalizePath(pwd)
error <- reactiveValues(text = NULL)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, "ifof.status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
result <- eventReactive(status(), {
error$text <- NULL
out <- list(finished = NULL, result = NULL, error = FALSE, progress = NULL)
if( !is.null(status()) ){
out$progress <- status()$progress
if( status()$progress == "1" ){
out$finished <- Sys.time()
if( is.null(status()$status) ){
out$result <- readRDS(file.path(pwd, paste0(id, "ifof.rds")))
} else {
out$error <- TRUE
}
}
}
out
})
output$errorMessage_fin <- renderUI(HTML(paste0("<div style='color:red'>", error$text, "</div>")))
output$result <- renderPrint(result())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process-"
pwd <- "./tmp"
pwd <- normalizePath(pwd)
error <- reactiveValues(text = NULL)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, "ifof.status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
result <- eventReactive(status(), {
error$text <- NULL
out <- list(finished = NULL, result = NULL, error = FALSE, progress = NULL)
if( !is.null(status()) ){
out$progress <- status()$progress
if( status()$progress == "1" ){
out$finished <- Sys.time()
if( is.null(status()$status) ){
out$result <- readRDS(file.path(pwd, paste0(id, "ifof.rds")))
} else {
out$error <- TRUE
error$text <- status()$status
}
}
}
out
})
output$errorMessage_fin <- renderUI(HTML(paste0("<div style='color:red'>", error$text, "</div>")))
output$result <- renderPrint(result())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
library(shinyTools)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), uiOutput("errorMessage_fin"), verbatimTextOutput("result"), verbatimTextOutput("res2"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process-"
pwd <- "./tmp"
pwd <- normalizePath(pwd)
error <- reactiveValues(text = NULL)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, "ifof.status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
result <- eventReactive(status(), {
error$text <- NULL
out <- list(finished = NULL, result = NULL, error = FALSE, progress = NULL)
if( !is.null(status()) ){
out$progress <- status()$progress
if( status()$progress == "1" ){
out$finished <- Sys.time()
if( is.null(status()$status) ){
out$result <- readRDS(file.path(pwd, paste0(id, "ifof.rds")))
} else {
out$error <- TRUE
error$text <- status()$status
}
}
}
out
})
output$errorMessage_fin <- renderUI(HTML(paste0("<div style='color:red'>", error$text, "</div>")))
output$result <- renderPrint(result())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
source("R/RProcessFinish.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), ProcessFinishUI("process"), verbatimTextOutput("result"))
))
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), RProcessFinishUI("process"), verbatimTextOutput("result"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
}
shinyApp(ui, server)
source("R/RProcessFinish.R")
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
}
shinyApp(ui, server)
source("R/RProcessFinish.R")
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
}
shinyApp(ui, server)
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), RProcessFinishUI("process"), plotOutput("plot"), verbatimTextOutput("result"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
output$plot <- renderPlot(plot(1:100, result()$result))
}
shinyApp(ui, server)
shinyApp(ui, server)
Abort
?Abort
??Abort
library(shinyTools)
source("R/RProcessFinish.R")
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), RProcessFinishUI("process"), plotOutput("plot"), verbatimTextOutput("result"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
output$plot <- renderPlot(plot(1:100, result()$result))
}
shinyApp(ui, server)
input <- shinyTools::Init("tmp/process-ifof.status")
shinyTools::Log(c("Input is", input))
getwd()
getwd()
setwd(..)
setwd("..")
input <- shinyTools::Init("tmp/process-ifof.status")
shinyTools::Log(c("Input is", input))
input > 100
if(input > 100) shinyTools::Abort("Input greater 100")
roxygen2::roxygenise()
setwd("..")
getwd()
roxygen2::roxygenise()
library(shinyTools)
source("R/RProcessFinish.R")
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), RProcessFinishUI("process"), plotOutput("plot"), verbatimTextOutput("result"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
output$plot <- renderPlot(plot(1:100, result()$result))
}
shinyApp(ui, server)
library(ggplot2)
a <- ggplot(mtcars) + geom_path(aes(x = displ, y = cyl))
a
mtcars
str(mtcars)
library(ggplot2)
a <- ggplot(mtcars) + geom_path(aes(x = disp, y = mpg))
a
a <- ggplot(mtcars) + geom_point(aes(x = disp, y = mpg))
a
rm(a)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), RProcessFinishUI("process"), plotOutput("plot"), verbatimTextOutput("result"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
output$plot <- renderPlot(plot(1:100, result()$result))
}
shinyApp(ui, server)
input <- shinyTools::Init("tmp/process-ifof.status")
library(ggplot2)
a <- ggplot(mtcars) + geom_point(aes(x = disp, y = mpg))
shinyTools::Log(c("Input is", input))
input
input <- 11
library(ggplot2)
a <- ggplot(mtcars) + geom_point(aes(x = disp, y = mpg))
shinyTools::Log(c("Input is", input))
if(input > 100) shinyTools::Abort("Input greater 100")
info <- shinyTools::Up(0.8)
res <- shinyTools::Try(dpois(1:100, input))
shinyTools::Fin(res)
setwd("..")
getwd()
setwd("shinyTools")
library(shinyTools)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), RProcessFinishUI("process"), plotOutput("plot"), verbatimTextOutput("result"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
output$plot <- renderPlot(plot(1:100, result()$result))
}
shinyApp(ui, server)
