n <- 5
lines <- sample(1:length(lib), n)
captures <- eventReactive(input$regex, {
if(length(input$regex) < 1 || input$regex == "") return(lines)
nLines <- if(length(lines) > n) n else length(lines)
m <- list()
for( i in 1:nLines ){
m <- append(m, GetCaptures(lines[i], input$regex))
}
m
})
output$display <- renderPrint(captures())
}
shinyApp(ui, server)
source("R/GetCaptures.R")
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- sample(1:length(lib), n)
captures <- eventReactive(input$regex, {
if(length(input$regex) < 1 || input$regex == "") return(lines)
nLines <- if(length(lines) > n) n else length(lines)
#m <- list()
#for( i in 1:nLines ){
#  m <- append(m, GetCaptures(lines[i], input$regex))
#}
lines
})
output$display <- renderPrint(captures())
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), n)]
captures <- eventReactive(input$regex, {
if(length(input$regex) < 1 || input$regex == "") return(lines)
nLines <- if(length(lines) > n) n else length(lines)
#m <- list()
#for( i in 1:nLines ){
#  m <- append(m, GetCaptures(lines[i], input$regex))
#}
lines
})
output$display <- renderPrint(captures())
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), n)]
captures <- eventReactive(input$regex, {
if(length(input$regex) < 1 || input$regex == "") return(lines)
nLines <- if(length(lines) > n) n else length(lines)
m <- list()
for( i in 1:nLines ){
m <- append(m, GetCaptures(lines[i], input$regex))
}
m
})
output$display <- renderPrint(captures())
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), n)]
captures <- eventReactive(input$regex, {
if(length(input$regex) < 1 || input$regex == "") return(lines)
nLines <- if(length(lines) > n) n else length(lines)
m <- list()
for( i in 1:nLines ){
m <- append(m, GetCaptures(lines[i], input$regex))
}
m[[1]]
})
output$display <- renderPrint(captures())
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), n)]
captures <- eventReactive(input$regex, {
if(length(input$regex) < 1 || input$regex == "") return(lines)
nLines <- if(length(lines) > n) n else length(lines)
#m <- list()
i <- 1
#for( i in 1:nLines ){
m <- GetCaptures(lines[i], input$regex)
#}
m
})
output$display <- renderPrint(captures())
}
shinyApp(ui, server)
a <-list()
append(a, matrix(NA,2,2))
vector("list", 5)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), n)]
captures <- eventReactive(input$regex, {
if(length(input$regex) < 1 || input$regex == "") return(lines)
nLines <- if(length(lines) > n) n else length(lines)
m <- vector("list", nLines)
i <- 1
for( i in 1:nLines ){
m[[i]] <- GetCaptures(lines[i], input$regex)
}
m
})
output$display <- renderPrint(captures())
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
m <- vector("list", nLines)
i <- 1
for( i in 1:nLines ){
m <- GetCaptures(lines[i], input$regex)
}
HTML(paste0("<div style='color:", cols[1], ";'>Some Text</div>"))
})
}
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
uiOutput("display")
)
))
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
m <- vector("list", nLines)
i <- 1
for( i in 1:nLines ){
m <- GetCaptures(lines[i], input$regex)
}
HTML(paste0("<div style='color:", cols[1], ";'>Some Text</div>"))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
m <- vector("list", nLines)
i <- 1
for( i in 1:nLines ){
m <- GetCaptures(lines[i], input$regex)
}
HTML(paste0("<div style='color:db4437;'>Some Text</div>"))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
m <- vector("list", nLines)
i <- 1
for( i in 1:nLines ){
m <- GetCaptures(lines[i], input$regex)
}
HTML(paste0('<font color="red">This is some text!</font>'))
})
}
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
uiOutput("captures")
)
))
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
m <- vector("list", nLines)
i <- 1
for( i in 1:nLines ){
m <- GetCaptures(lines[i], input$regex)
}
HTML(paste0('<font color="red">This is some text!</font>'))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
#m <- vector("list", nLines)
#i <- 1
#for( i in 1:nLines ){
#  m <- GetCaptures(lines[i], input$regex)
#}
HTML(paste0('<font color="red">This is some text!</font>'))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
#m <- vector("list", nLines)
#i <- 1
#for( i in 1:nLines ){
#  m <- GetCaptures(lines[i], input$regex)
#}
HTML(paste0('<font color="#4285f4">This is some text!</font>'))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
#m <- vector("list", nLines)
#i <- 1
#for( i in 1:nLines ){
#  m <- GetCaptures(lines[i], input$regex)
#}
HTML(paste0('<font color="', cols[1], '">This is some text!</font>'))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
txt <- character()
for( i in 1:n ){
m <- GetCaptures(x[i], pat)
m <- apply(rbind(m[1, ], apply(m, 2, function(s) substr(x, s[2], s[3]))), 2, function(ss){
if(as.integer(ss[1]) != 0) paste0('<font color="', cols[as.integer(ss[1])], '">', ss[2], "</font>") else ss[2]})
txt <- c(txt, paste(m, collapse = ""))
}
HTML(paste0("<tt>", paste( txt, collapse = "<br/>"), "</tt>"))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
x <- x[sample(1:length(x), n)]
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>","</tt>"))))
txt <- character()
for( i in 1:n ){
m <- GetCaptures(x[i], pat)
m <- apply(rbind(m[1, ], apply(m, 2, function(s) substr(x, s[2], s[3]))), 2, function(ss){
if(as.integer(ss[1]) != 0) paste0('<font color="', cols[as.integer(ss[1])], '">', ss[2], "</font>") else ss[2]})
txt <- c(txt, paste(m, collapse = ""))
}
HTML(paste0("<tt>", paste( txt, collapse = "<br/>"), "</tt>"))
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
n <- 5
lines <- lib[sample(1:length(lib), 1000)]
cols <- c("#db4437", "#4285f4", "#0f9d58", "#f4b400")
output$captures <- renderUI({
x <- lines
pat <- input$regex
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines detected.</div>")))
x <- x[grepl(pat, x)]
if(length(x) < n) return(HTML(paste("<div style='color:red;'>Fewer than", n, "lines match the pattern.</div>")))
x <- x[sample(1:length(x), n)]
if(length(pat) < 1 || pat == "") return(HTML(paste0("<tt>", paste(x, collapse = "<br/>"), "</tt>")))
txt <- character()
for( i in 1:n ){
m <- GetCaptures(x[i], pat)
m <- apply(rbind(m[1, ], apply(m, 2, function(s) substr(x, s[2], s[3]))), 2, function(ss){
if(as.integer(ss[1]) != 0) paste0('<font color="', cols[as.integer(ss[1])], '">', ss[2], "</font>") else ss[2]})
txt <- c(txt, paste(m, collapse = ""))
}
HTML(paste0("<tt>", paste( txt, collapse = "<br/>"), "</tt>"))
})
}
shinyApp(ui, server)
source("R/GetCaptures.R")
source("R/CapturePattern.R")
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = input$regex, lines = lib)
}
shinyApp(ui, server)
source("R/GetCaptures.R")
source("R/CapturePattern.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = input$regex, lines = lib)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(CapturePattern, "cap", input$regex, lines = lib)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = lib)
}
shinyApp(ui, server)
source("R/GetCaptures.R")
source("R/CapturePattern.R")
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
source("R/GetCaptures.R")
source("R/CapturePattern.R")
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
head(lib)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = lib)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
source("R/GetCaptures.R")
source("R/CapturePattern.R")
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
library(shinyTools)
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
library(shinyTools)
library(shiny)
library(shinyTools)
roxygen2::roxygenise()
library(shiny)
library(shinyTools)
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
library(shiny)
library(shinyTools)
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE))
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
