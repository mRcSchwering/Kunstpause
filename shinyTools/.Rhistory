sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), plotOutput("res1"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
res1 <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(path) ReadInfo)
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), plotOutput("res1"), verbatimTextOutput("res2"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(path) ReadInfo)
#output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")), ReadInfo)
#output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
#output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
sample(1:10, 10)
sample(1:10, 10)
sample(1:10, 10)
sample(1:10, 10)
sample(1:10, 10)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(status$progress != 1) NULL
else plot(1:10,sample(1:10, 10))
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(status$progress != 1) plot(1:10,sample(1:10, 10))
else plot(1:10,sample(1:10, 10))
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(!is.null(status()) || status()$progress != 1) plot(1:10,sample(1:10, 10))
else plot(1:10,sample(1:10, 10))
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
a <- plot(1:10, 1:10)
a
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(!is.null(status()) || status()$progress != 1) NULL
else plot(1:10,sample(1:10, 10))
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(!is.null(status()) || status()$progress != "1") NULL
else plot(1:10,sample(1:10, 10))
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
print("triggered")
if(!is.null(status()) || status()$progress != "1") NULL
else plot(1:10,sample(1:10, 10))
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(!is.null(status()) || status()$progress != "1") NULL else {
print("triggered")
plot(1:10,sample(1:10, 10))
}
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(is.null(status()) || status()$progress != "1") NULL else {
print("triggered")
plot(1:10,sample(1:10, 10))
}
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
?eventReactive
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(is.null(status()) || status()$progress != "1") NULL else {
out <- readRDS(file.path(pwd, paste0(id, ".rds")))
out
}
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(is.null(status()) || status()$progress != "1") NULL else {
out <- readRDS(file.path(pwd, paste0(id, ".rds")))
print("triggered")
out
}
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(is.null(status()) || status()$progress != "1") NULL else {
out <- readRDS(file.path(pwd, paste0(id, ".rds")))
print("triggered")
out
}
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(is.null(status()) || status()$progress != "1") NULL else {
out <- readRDS(file.path(pwd, paste0(id, ".rds")))
print(file.path(pwd, paste0(id, ".rds")))
print(str(out))
out
}
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
list.files()
list.files("tmp")
a <- readRDS("tmp/process-ifof.rds")
a
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(is.null(status()) || status()$progress != "1") NULL else {
out <- readRDS(file.path(pwd, paste0(id, ".rds")))
out
}
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
a <- readRDS("tmp/process-ifof.rds")
a
Try(1+1)
input <- shinyTools::Init(commandArgs(TRUE))
input <- shinyTools::Init("tmp/process-ifof.status")
input
str(input)
input <- 10
Try(ggplot2::qplot(1:100, dpois(1:100, input)))
input
ggplot2::qplot(1:100, dpois(1:100, input))
ggplot2::qplot(1:100, dpois(1:100, input))
input <- shinyTools::Try(ggplot2::qplot(1:100, dpois(1:100, input)))
input
str(input)
shinyTools::Try(1+1, ignore = TRUE)
rm(info)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(is.null(status()) || status()$progress != "1") NULL else {
out <- readRDS(file.path(pwd, paste0(id, ".rds")))
out
}
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
shinyApp(ui, server)
getwd()
setwd("..")
getwd()
shinyApp(ui, server)
ggplot2::qplot(1:100, dpois(1:100, 2))
shinyApp(ui, server)
shinyApp(ui, server)
a <- readRDS("tmp/process-ifof.rds")
a
input <- shinyTools::Init("tmp/process-ifof.status")
input
ggplot2::qplot(1:100, dpois(1:100, input)
)
ggplot2::qplot(1:100, dpois(1:100, input))
input <- ggplot2::qplot(1:100, dpois(1:100, input)) #shinyTools::Try(ggplot2::qplot(1:100, dpois(1:100, input)))
input
ggplot(data.frame(x = 1:100, y = dpois(1:100, input))) + geom_point(aes(x = x, y = y))
library(ggplot2)
ggplot(data.frame(x = 1:100, y = dpois(1:100, input))) + geom_point(aes(x = x, y = y))
str(input)
input <- 10
ggplot(data.frame(x = 1:100, y = dpois(1:100, input))) + geom_point(aes(x = x, y = y))
ggplot2::qplot(1:100, dpois(1:100, input))
a <- ggplot(data.frame(x = 1:100, y = dpois(1:100, input))) + geom_point(aes(x = x, y = y))
a
a <- ggplot2::qplot(1:100, dpois(1:100, input))
a
a
a
a <- ggplot(data.frame(x = 1:100, y = dpois(1:100, input))) + geom_point(aes(x = x, y = y))
input <- ggplot(data.frame(x = 1:100, y = dpois(1:100, input))) + geom_point(aes(x = x, y = y))
input
a <- ggplot2::qplot(1:100, dpois(1:100, input)) #shinyTools::Try(ggplot2::qplot(1:100, dpois(1:100, input)))
a
input <- 10
a <- ggplot2::qplot(1:100, dpois(1:100, input)) #shinyTools::Try(ggplot2::qplot(1:100, dpois(1:100, input)))
a
str(a)
a <- ggplot2::qplot(1:100, dpois(1:100, input)) #shinyTools::Try(ggplot2::qplot(1:100, dpois(1:100, input)))
a
rm(input)
a
library(highcharter)
input <- 10
a <- hchart(input)
a
rm(input)
a
input <- 10
a <- ggplot2::qplot(1:100, dpois(1:100, input)) #shinyTools::Try(ggplot2::qplot(1:100, dpois(1:100, input)))
b <- list(a)
rm(input)
a
b
input <- 10
a <- print(ggplot2::qplot(1:100, dpois(1:100, input))) #shinyTools::Try(ggplot2::qplot(1:100, dpois(1:100, input)))
a
rm(input)
a
input <- 10
a <- ggplot2::qplot(1:100, dpois(1:100, input))$plot #shinyTools::Try(ggplot2::qplot(1:100, dpois(1:100, input)))
a
?ggplot_build
a <- ggplot_build(qplot(1:100, dpois(1:100, input))) #shinyTools::Try(ggplot2::qplot(1:100, dpois(1:100, input)))
a
input <- 10
rm(input)
a
input <- 10
eval(input)
str(eval(input))
a <- ggplot_build(qplot(1:100, dpois(1:100, eval(input)))) #shinyTools::Try(ggplot2::qplot(1:100, dpois(1:100, input)))
a <- qplot(1:100, dpois(1:100, eval(input)))
a
rm(input)
a
input <- 10
e. <- environment()
.e <- environment()
rm(e.)
a <- ggplot(data.frame(x = 1:100, y = dpois(1:100, input)), environment = .e) + geom_point(aes(x = x, y = y))
a
rm(input)
a
rm(b)
a
getwd()
setwd("..")
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), plotOutput("res1"), verbatimTextOutput("res2"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
id <- "process"
pwd <- "./tmp"
id <- paste0(id, "-ifof")
pwd <- normalizePath(pwd)
status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, ".status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
res1 <- eventReactive(status(), {
if(is.null(status()) || status()$progress != "1") NULL else {
out <- readRDS(file.path(pwd, paste0(id, ".rds")))
out
}
})
output$res1 <- renderPlot(res1())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
input <- shinyTools::Init("tmp/process-ifof.status")
library(ggplot2)
.e <- environment()
ggplot(data.frame(x = 1:100, y = dpois(1:100, input)), environment = .e) + geom_point(aes(x = x, y = y))
shinyTools::Try( ggplot(data.frame(x = 1:100, y = dpois(1:100, input)), environment = .e) + geom_point(aes(x = x, y = y)) )
class(ggplot(data.frame(x = 1:100, y = dpois(1:100, input)), environment = .e) + geom_point(aes(x = x, y = y)))
a <- shinyTools::Try( ggplot(data.frame(x = 1:100, y = dpois(1:100, input)), environment = .e) + geom_point(aes(x = x, y = y)) )
a
shinyTools::Fin(a)
ls(envir = globalenv())
class(get(x, envir = globalenv()))
Filter(function(x) class(get(x, envir = globalenv())) == "ProcessInfo", ls(envir = globalenv()))[1]
Filter(function(x) class(get(x, envir = globalenv())) == "ProcessInfo", ls(envir = globalenv()))
class(input)
Filter(function(x) class(get(x, envir = globalenv()))[1] == "ProcessInfo", ls(envir = globalenv()))
