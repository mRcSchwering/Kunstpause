))
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
secondFile <- callModule(FileUpload, "second", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
output$content2 <- renderPrint(secondFile())
}
shinyApp(ui, server)
library(shinyjs)
?disable
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
br(),
h2("Upload multiple Files"),
FileUploadUI("second", "Second File Upload", rename = "rename", multiple = TRUE),
actionButton("disable", "disable")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
secondFile <- callModule(FileUpload, "second", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
output$content2 <- renderPrint(secondFile())
observeEvent(input$disable, {
toggleState("first")
})
}
shinyApp(ui, server)
shinyApp(ui, server)
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
secondFile <- callModule(FileUpload, "second", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
output$content2 <- renderPrint(secondFile())
observeEvent(input$disable, {
toggleState("first-file")
toggleState("first-rename_1")
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
secondFile <- callModule(FileUpload, "second", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
output$content2 <- renderPrint(secondFile())
observeEvent(input$disable, {
toggleState(selector = "input[type='text']")
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
secondFile <- callModule(FileUpload, "second", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
output$content2 <- renderPrint(secondFile())
observeEvent(input$disable, {
disable(selector = "input[type='text']")
})
}
shinyApp(ui, server)
source("R/FileUpload.R")
source("check.R")
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
secondFile <- callModule(FileUpload, "second", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
output$content2 <- renderPrint(secondFile())
}
shinyApp(ui, server)
source("R/FileUpload.R")
source("check.R")
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
secondFile <- callModule(FileUpload, "second", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
output$content2 <- renderPrint(secondFile())
}
shinyApp(ui, server)
source("R/FileUpload.R")
source("check.R")
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
secondFile <- callModule(FileUpload, "second", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
output$content2 <- renderPrint(secondFile())
}
shinyApp(ui, server)
?toggle()
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
actionButton("toggleFile", "toggleFile"),
br(),
h2("Form"),
div(id = "form", p("some text"), textInput("label", "label")),
actionButton("toggleForm", "toggleForm")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggleForm,{
toggle("form")
})
}
shinyApp(ui, server)
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggleForm,{
reset("form")
})
}
shinyApp(ui, server)
?onclick
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggleForm, print("Hello"))
}
shinyApp(ui, server)
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggleForm, hide("form"))
}
shinyApp(ui, server)
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggleForm, disable("label"))
}
shinyApp(ui, server)
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggleForm, shinyjs::disable("label"))
}
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
actionButton("toggleFile", "toggleFile"),
br(),
h2("Form"),
div(id = "form", p("some text"), numericInput("label", "label")),
actionButton("toggleForm", "toggleForm")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
actionButton("toggleFile", "toggleFile"),
br(),
h2("Form"),
div(id = "form", p("some text"), numericInput("label", "label", 5)),
actionButton("toggleForm", "toggleForm")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggleForm, shinyjs::disable("label"))
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
moduleTestUI <- function(id){
ns <- NS(id)
tagList(
h1("Tests to ensure shinyjs works in Shiny modules"),
br(),
h4("Clicking on the Name text input will show an alert box after 1 second"),
div(id = ns('form'),
textInput(ns('text'), 'Name', value = "Dean"),
colourInput(ns('col'), 'Colour', value = "blue"),
actionButton(ns("resetForm"), "Reset form"),
actionButton(ns("resetText"), "Reset text"),
actionButton(ns("hideForm"), "Hide form"),
actionButton(ns("toggleText"), "Toggle text"),
actionButton(ns("disableText"), "Disable text")
)
)
}
moduleTest <- function(input, output, session) {
onclick("text", delay(1000, info("clicked me!")))
onevent("mouseenter", "text", logjs("entered"))
observeEvent(input$resetForm, reset("form"))
observeEvent(input$resetText, reset("text"))
observeEvent(input$hideForm, hide("form"))
observeEvent(input$toggleText, toggle("text", anim = TRUE))
observeEvent(input$disableText, disable("text"))
}
ui <- fluidPage(
useShinyjs(debug = TRUE),
moduleTestUI('test')
)
server <- function(input, output, session) {
callModule(moduleTest, 'test')
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(sidebarLayout(
useShinyjs(debug = TRUE),
sidebarPanel( width = 4,
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
actionButton("toggleFile", "toggleFile"),
br(),
h2("Form"),
div(id = "form", p("some text"), numericInput("label", "label", 5)),
actionButton("toggleForm", "toggleForm")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
useShinyjs(debug = TRUE),
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
actionButton("toggleFile", "toggleFile"),
br(),
h2("Form"),
div(id = "form", p("some text"), numericInput("label", "label", 5)),
actionButton("toggleForm", "toggleForm")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggleForm, shinyjs::disable("label"))
}
shinyApp(ui, server)
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggleForm, shinyjs::toggle("form"))
}
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
useShinyjs(debug = TRUE),
h2("Upload a File"),
div(id = "file", FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE)),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggle, toggle("file"))
}
shinyApp(ui, server)
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggle, toggleState("file"))
}
shinyApp(ui, server)
shinyApp(ui, server)
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
#observeEvent(input$toggle, toggleState("file"))
}
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
#useShinyjs(debug = TRUE),
h2("Upload a File"),
div(id = "file", FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE)),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
useShinyjs(debug = TRUE),
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
shinyApp(ui, server)
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggle, toggleState("file"))
}
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
#useShinyjs(debug = TRUE),
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggle, toggleState("file"))
}
shinyApp(ui, server)
library(shiny)
source("R/FileUpload.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
#useShinyjs(debug = TRUE),
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
source("check.R")
server <-function(input, output, session) {
# use modules (args: module name, id for namespace, ... custom arguments of module)
firstFile <- callModule(FileUpload, "first", rename = TRUE, checkFile = "check", checkNames = "check2")
# some processing (not part of module)
output$content1 <- renderPrint(firstFile())
# toggle stuff
observeEvent(input$toggle, toggleState("file"))
}
shinyApp(ui, server)
library(shinyjs)
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
useShinyjs(debug = TRUE),
h2("Upload a File"),
FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
useShinyjs(debug = TRUE),
h2("Upload a File"),
div( id = "form", FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE)),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4,
useShinyjs(debug = TRUE),
h2("Upload a File"),
div(id = "file", FileUploadUI("first", "First File Upload", rename = "rename", multiple = TRUE, horiz = TRUE)),
actionButton("toggle", "toggle")
),
mainPanel( width = 8,
h1("File Upload Modul"),
h3("First File Content"),
verbatimTextOutput("content1"), br(),
h3("Info to Second File(s)"),
verbatimTextOutput("content2")
)
))
shinyApp(ui, server)
