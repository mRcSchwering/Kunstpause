# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
ProcessUp(0.5)
ProcessUp <- function(progress, log = paste("Progress update to", progress), info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
# look for ProcessInfo object
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(envir = globalenv()))[1])
return(info)
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# write log if pid valid
Log(log, info = info)
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
ProcessUp(0.5)
ProcessUp <- function(progress, log = paste("Progress update to", progress), info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
# look for ProcessInfo object
if(is.null(info)) info <- get(return(Filter(function(x) class(get(x)) == "ProcessInfo", ls(envir = globalenv()))[1]))
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# write log if pid valid
Log(log, info = info)
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
ProcessUp(0.5)
ProcessUp <- function(progress, log = paste("Progress update to", progress), info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
# look for ProcessInfo object
if(is.null(info)) info <- get(Filter(function(x) class(get(x)) == "ProcessInfo", return(ls(envir = globalenv()))) )
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# write log if pid valid
Log(log, info = info)
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
ProcessUp(0.5)
get(Filter(function(x) class(get(x)) == "ProcessInfo", ls(envir = globalenv()))[1])
class(get(ls(envir = globalenv())))
ls(envir = globalenv()
ls(envir = globalenv())
ls(envir = globalenv())
get( ls(envir = globalenv()) )
ls(envir = globalenv())
sapply(ls(envir = globalenv()), function(x) class(get(x)))
sapply(ls(envir = globalenv()), function(x) Filter(class(get(x)) == "ProcessInfo"))
ls(envir = globalenv())
sapply(ls(envir = globalenv()), function(x) class(get(x)) == "ProcessInfo")
?Filter
Filter(function(x) class(get(x)) == "ProcessInfo", ls(envir = globalenv()))
ProcessUp <- function(progress, log = paste("Progress update to", progress), info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
# look for ProcessInfo object
if(is.null(info))  return(Filter(function(x) class(get(x)) == "ProcessInfo", ls(envir = globalenv())))
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# write log if pid valid
Log(log, info = info)
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
ProcessUp(0.5)
ProcessUp <- function(progress, log = paste("Progress update to", progress), info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
print(ls(envir = globalenv()))
print(sapply(ls(envir = globalenv()), function(x) class(get(x))))
# look for ProcessInfo object
if(is.null(info))  return(Filter(function(x) class(get(x)) == "ProcessInfo", ls(envir = globalenv())))
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# write log if pid valid
Log(log, info = info)
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
ProcessUp(0.5)
asd <- "asd"
class("asd") <- "asd"
class(asd) <- "asd"
class(asd)
showclass <- function(x) class(x)
showclass(asd)
showclass(info)
?get
ProcessUp <- function(progress, log = paste("Progress update to", progress), info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
print(sapply(ls(envir = globalenv()), function(x) class(get(x), envir = globalenv())))
# look for ProcessInfo object
if(is.null(info))  return(Filter(function(x) class(get(x)) == "ProcessInfo", ls(envir = globalenv())))
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# write log if pid valid
Log(log, info = info)
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
ProcessUp(0.5)
ProcessUp <- function(progress, log = paste("Progress update to", progress), info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
print(sapply(ls(envir = globalenv()), function(x) class(get(x, envir = globalenv()))))
# look for ProcessInfo object
if(is.null(info))  return(Filter(function(x) class(get(x)) == "ProcessInfo", ls(envir = globalenv())))
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# write log if pid valid
Log(log, info = info)
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
ProcessUp(0.5)
ProcessUp <- function(progress, log = paste("Progress update to", progress), info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
# look for ProcessInfo object
if(is.null(info)) info <- get(Filter(function(x) class(get(x, pos = 1)) == "ProcessInfo", ls(pos = 1))[1])
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# write log if pid valid
Log(log, info = info)
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
ProcessUp(0.5)
ProcessUp <- function(progress, log = paste("Progress update to", progress), info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
# look for ProcessInfo object
if(is.null(info)) info <- get(Filter(function(x) class(get(x, envir = globalenv())) == "ProcessInfo", ls(envir = globalenv()))[1])
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# write log if pid valid
Log(log, info = info)
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
ProcessUp(0.5)
ProcessUp <- function(progress, log = paste("Progress update to", progress), info = NULL){
if(progress >= 1 || progress <= 0) stop("Progress must be greater 0 and smaller 1")
# look for ProcessInfo object
if(is.null(info)) info <- get(
Filter(function(x) class(get(x, envir = globalenv())) == "ProcessInfo", ls(envir = globalenv()))[1],
envir = globalenv())
if(length(info) < 1) stop("Argument info empty or no ProcessInfo object found.")
# write log if pid valid
Log(log, info = info)
# update progress
info$progress <- progress
write(sapply(1:length(info), function(x) paste0(names(info)[x], ";", paste(info[[x]], collapse = ";"))), info$statusFile)
info
}
ProcessUp(0.5)
roxygen2::roxygenise()
setwd("/home/marc/src/mRc_repo/shinyTools")
library(shinyTools)
input <- RProcessInit("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
info <- RProcessUp(0.2)
Log("some log")
Try(sum(1+2))
RProcessFin("asd")
readRDS("tmp/id1.rds")
?actionButton
library(shinyTools)
?actionButton
?numericInput
numericInput("num1", "Multiply this number", 2, 1, 5)
server <-function(input, output, session) {
#output$res1 <- renderPrint(res1())
output$res1 <- renderPrint(input$num2^2)
}
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("RProcess"),
numericInput("num1", "Number2", 2, 1, 5),
actionButton("trigger", "Multiply number1"),
helpText("This is done in R batch script."), br(),
numericInput("num2", "Number1", 2, 1, 5),
helpText("Number2 is multiplied in app.")
),
mainPanel(h2("Result of number1"), verbatimTextOutput("res1"),
h2("Result of number2"), verbatimTextOutput("res2"))
))
shinyApp(ui, server)
server <-function(input, output, session) {
observeEvent(input$trigger, {
print("triggered")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
file.path(getwd(), "tmp")
format(Sys.time(), "%Y-%m-%d_%H:%M_")
paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
"id1"
file.path(getwd(), "tmp")
file.path(pwd, paste0(id, ".status"))
?system2
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- "id1234"
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))))
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- "id1234"
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = NULL)
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
shinyApp(ui, server)
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- "id1234"
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = NULL, stderr = NULL)
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
?write
getwd()
shinyApp(ui, server)
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- "id1234"
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = "", stderr = "")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
library(shinyTools)
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("RProcess"),
numericInput("num1", "Number1", 2, 1, 5),
actionButton("trigger", "Multiply number1"),
helpText("This is done in R batch script."), br(),
numericInput("num2", "Number2", 2, 1, 5),
helpText("Number2 is multiplied in app.")
),
mainPanel(h2("Result of number1"), verbatimTextOutput("res1"),
h2("Result of number2"), verbatimTextOutput("res2"))
))
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- "id1234"
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = "", stderr = "")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
shinyApp(ui, server)
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- NULL
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = "", stderr = "")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
a <- list(a = 1:2, b = 3:4)
a <- list(a = 1:2, b = 3:4, c = "")
a
lapply(a, function(x) if(x == "") NULL)
lapply(a, function(x) if(x[1] == "") NULL)
a
lapply(a, function(x) if(x[1] == ""))
lapply(a, function(x) x[1] == "")
lapply(a, function(x) if(x[1] == "") NULL else x)
a$a <- "asd"
lapply(a, function(x) if(x[1] == "") NULL else x)
library(shinyTools)
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("RProcess"),
numericInput("num1", "Number1", 2, 1, 5),
actionButton("trigger", "Multiply number1"),
helpText("This is done in R batch script."), br(),
numericInput("num2", "Number2", 2, 1, 5),
helpText("Number2 is multiplied in app.")
),
mainPanel(h2("Result of number1"), verbatimTextOutput("res1"),
h2("Result of number2"), verbatimTextOutput("res2"))
))
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- NULL
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = "", stderr = "")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
ReadInfo("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
ReadInfo <- function(statusFile){
info <- strsplit(readLines(statusFile), ";")
names(info) <- sapply(info, function(x) x[1])
info <- sapply(info, function(x) x[-1])
info$statusFile <- statusFile
#info <- lapply(info, function(x) if(x[1] == "") NULL else x)
class(info) <- "ProcessInfo"
info
}
ReadInfo("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
ReadInfo <- function(statusFile){
info <- strsplit(readLines(statusFile), ";")
names(info) <- sapply(info, function(x) x[1])
info <- sapply(info, function(x) x[-1])
info$statusFile <- statusFile
info <- lapply(info, function(x) if(length(x) < 1) NULL else x)
class(info) <- "ProcessInfo"
info
}
ReadInfo("/home/marc/src/mRc_repo/shinyTools/tmp/id1.status")
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- NULL
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = "", stderr = "")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
library(shinyTools)
shinyApp(ui, server)
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- "asd1234"
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- NULL #"/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = "", stderr = "")
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
shinyApp(ui, server)
server <-function(input, output, session) {
observeEvent(input$trigger, {
input <- input$num1
id <- "id1"
pid <- paste0(format(Sys.time(), "%Y-%m-%d_%H:%M_"), paste(sample(0:9, 4, replace = TRUE), collapse = ""))
sessionid <- "asd1234"
pwd <- file.path(getwd(), "tmp")
command <- "Rscript"
scriptPath <- "/home/marc/src/mRc_repo/shinyTools/scripts/process.R"
logFile <- "/home/marc/src/mRc_repo/shinyTools/log/log.log"
# write input
saveRDS(input, file.path(pwd, paste0(id, ".rds")))
# write info file
info <- c(paste0("progress;", 0), paste0("pid;", pid), paste0("sessionid;", sessionid),
"status", paste0("pwd;", pwd), paste0("ifof;", file.path(pwd, paste0(id, ".rds"))),
paste0(command, ";", scriptPath), paste0("logFile;", logFile))
write(info, file.path(pwd, paste0(id, ".status")))
# start
system2(command, args = c(scriptPath, file.path(pwd, paste0(id, ".status"))), wait = FALSE, stdout = NULL, stderr = NULL)
})
#output$res1 <- renderPrint(res1())
output$res2 <- renderPrint(input$num2^2)
}
shinyApp(ui, server)
