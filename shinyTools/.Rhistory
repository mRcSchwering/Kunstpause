info <- callModule(FileUpload, "uploadID", rename = TRUE, checkNames = "check2", checkFiles = "check1",
addArgs = list(pat = "a", type = "text"))
output$content1 <- renderPrint(info())
}
shinyApp(ui, server)
?TextInput
roxygen2::roxygenise()
library(shinyTools)
?TextInput
library(shiny)
library(shinyTools)
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("TextInputUI"),
TextInputUI("id1", c("positive Ctrls", "non-targeting Ctrls"), c("positive", "non-targeting"),
help = "use HGNC symbols", horiz = FALSE)
),
mainPanel(h2("Output of TextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(TextInput, "id1", n = 2, checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
?CapturePattern
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
textInput("regex", "Regex"),
#selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE)),
helpText("Write your own Regex to try out.")
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}
shinyApp(ui, server)
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
2%%2
1%%2
3%%2
4%%2
5%%2
6%%2
1:10%%2
rm(lib)
ui <- fluidPage(sidebarLayout(
sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE)),
helpText("Write your own Regex to try out."),
br(), actionButton("push", "toggle")
),
mainPanel( width = 8, h2("CapturePatternUI"),
CapturePatternUI("cap", "Patterns Captured")
)
))
server <-function(input, output, session) {
lib <- eventReactive(input$push, {
if(input$push%%2 == 0){
lib <- NULL
} else {
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
}
NULL
})
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib()))
}
shinyApp(ui, server)
server <-function(input, output, session) {
lib <- eventReactive(input$push, {
if(input$push%%2 == 0){
lib <- NULL
} else {
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
1, function(x) paste0(x, collapse = "")))
}
lib
})
callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib()))
}
shinyApp(ui, server)
roxygen2::roxygenise()
library(shinyTools)
?CapturePattern
?TextInput
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("TextInputUI"),
TextInputUI("id1", c("positive Ctrls", "non-targeting Ctrls"), c("positive", "non-targeting"),
help = "use HGNC symbols", horiz = FALSE)
),
mainPanel(h2("Output of TextInput"), verbatimTextOutput("display"))
))
library(shinyTools)
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("TextInputUI"),
TextInputUI("id1", c("positive Ctrls", "non-targeting Ctrls"), c("positive", "non-targeting"),
help = "use HGNC symbols", horiz = FALSE)
),
mainPanel(h2("Output of TextInput"), verbatimTextOutput("display"))
))
roxygen2::roxygenise()
library(shiny)
library(shinyTools)
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("TextInputUI"),
TextInputUI("id1", c("positive Ctrls", "non-targeting Ctrls"), c("positive", "non-targeting"),
help = "use HGNC symbols", horiz = FALSE)
),
mainPanel(h2("Output of TextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(TextInput, "id1", n = 2, checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
?textInput
textInput("asd", "asd", NULL)
textInput("asd", "asd")
roxygen2::roxygenise()
library(shinyTools)
?CapturePattern
?TextInput
roxygen2::roxygenise()
library(shinyTools)
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("TextInputUI"),
TextInputUI("id1", c("positive Ctrls", "non-targeting Ctrls"), c("positive", "non-targeting"),
help = "use HGNC symbols", horiz = FALSE)
),
mainPanel(h2("Output of TextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(TextInput, "id1", n = 2, checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("TextInputUI"),
TextInputUI("id1", c("positive Ctrls", "non-targeting Ctrls"), dummy = c("positive", "non-targeting"),
help = "use HGNC symbols", horiz = FALSE)
),
mainPanel(h2("Output of TextInput"), verbatimTextOutput("display"))
))
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("TextInputUI"),
TextInputUI("id1", c("positive Ctrls", "non-targeting Ctrls"), c("non-targeting"),
help = "use HGNC symbols", horiz = FALSE)
),
mainPanel(h2("Output of TextInput"), verbatimTextOutput("display"))
))
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("TextInputUI"),
TextInputUI("id1", c("positive Ctrls", "non-targeting Ctrls"), c("positive", "non-targeting", "asd"),
help = "use HGNC symbols", horiz = FALSE)
),
mainPanel(h2("Output of TextInput"), verbatimTextOutput("display"))
))
library(shinyTools)
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("TextInputUI"),
TextInputUI("id1", c("positive Ctrls", "non-targeting Ctrls"), c("positive", "non-targeting"),
help = "use HGNC symbols", horiz = FALSE)
),
mainPanel(h2("Output of TextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(TextInput, "id1", n = 2, checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
library(shinyTools)
numericInput("nGroups", "Groups", 2, 0, 10)
source("R/ReactiveTextInput.R")
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
o
sapply(1:2, function(x) textInput(paste0("textInput_", x), NULL))
lapply(1:2, function(x) textInput(paste0("textInput_", x), NULL))
unlist(lapply(1:2, function(x) textInput(paste0("textInput_", x), NULL)))
tagList(lapply(1:2, function(x) textInput(paste0("textInput_", x), NULL)))
?textInput
source("R/ReactiveTextInput.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, 0, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
a <- NULL
a[5]
paste("Input", 1:5)
1:10%%1
(1:10%%1) + 1
(1:10%%2) + 1
(1:10%%3) + 1
1:10%%3 + 1
1:10%%NULL + 1
1:10%%NULL
source("R/ReactiveTextInput.R")
source("R/ReactiveTextInput.R")
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
1:10%in%3
1:10%%3
a <- c(1,2,3)
a[0]
a[1]
1:10%%3 + 1
1:10%%(3 + 1)
1:10%%2 + 1
(1:10+1)%%2
(1:10+1)%%2 + 1
(1:10+1)%%3 + 1
(1:10+2)%%3 + 1
(1:10+2)%%2 + 1
3%%1:10
1:10%%3
1:10%%4
1:10%%5
1:10%%2
1:10%%1
1:10%%3
1:10%%3 + 1
1:10%%(3 + 1)
1:10%%3 + 1
?%%
?mode()
modulus
?'%%'
+1
+ 1
+ x
+ i
1:10%%3 + 1
(1:10 - 1)%%3 + 1
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
1:10 - 1
(1:10 - 1)%%3
(1:10 - 1)%%3 + 1
(1 - 1)%%3 + 1
(2 - 1)%%3 + 1
(3 - 1)%%3 + 1
source("R/ReactiveTextInput.R")
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), dummies = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
?textInput
source("R/ReactiveTextInput.R")
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), dummies = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
sapply(1:3, function(x) "asd")
source("R/ReactiveTextInput.R")
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
source("R/ReactiveTextInput.R")
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
c(1,2,3,NULL)
a <- list(1,2,3)
a[[1]]
a[[4]]
a <- list(a = 1,b = 2,c = 3)
a$a
a$d
sapply(1:3, function(x) a[[letters[x]]])
sapply(1:4, function(x) a[[letters[x]]])
str(sapply(1:3, function(x) a[[letters[x]]]))
class(sapply(1:3, function(x) a[[letters[x]]]))
class(sapply(1:4, function(x) a[[letters[x]]]))
source("R/ReactiveTextInput.R")
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
source("R/ReactiveTextInput.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
library(shiny)
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = NULL, values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = "NULL", values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = "Group", values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
source("R/ReactiveTextInput.R")
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = "Group", values = c("1", "asd", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = "Group",
dummies = c("asd1", "asd2", "asd3"),
checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = "Group",
values = c("Untreated", "Treated"), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
roxygen2::roxygenise()
library(shinyTools)
?ReactiveTextInput
?ReactiveTextInput
roxygen2::roxygenise()
library(shinyTools)
check <- function(text, add){ if(any(grepl(add$pat, text))) return(paste("Don't use letter", add$pat, "in any entry."))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(h2("ReactiveTextInputUI"),
numericInput("nGroups", "n Groups", 2, -2, 10),
ReactiveTextInputUI("id1", "Groups")
),
mainPanel(h2("Output of ReactiveTextInput"), verbatimTextOutput("display"))
))
server <-function(input, output, session) {
display <- callModule(ReactiveTextInput, "id1", n = reactive(input$nGroups), prefix = "Group",
values = c("Untreated", "Treated"), checkFun = "check", addArgs = list(pat = "X"))
output$display <- renderPrint(display())
}
shinyApp(ui, server)
?ReactiveTextInput
Process
Rprocess
system.time
system.time()
today()
Sys.time()
c(Sys.time(), Sys.time())
?system2
length(NULL)
class(c("asd", "asdf"))
class(c(1:2))
